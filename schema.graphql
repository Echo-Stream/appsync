union App = ManagedApp | ExternalApp | XTenantReceivingApp | XTenantSendingApp

enum AppAuthType {
	x_account
	cognito
}

input AppInput {
	name: String!
	config: AWSJSON
	description: String
}

interface AppInterface @aws_cognito_user_pools{
	tenant: Tenant!
	name: String!
	description: String
	config: AWSJSON
}

type AppResult @aws_cognito_user_pools{
	items: [App]
	nextToken: String
	scannedCount: Int
}

type CognitoUser @aws_cognito_user_pools{
	tenant: Tenant!
	name: String!
	role: String!
}

type DicomTcpInboundNode implements NodeInterface @aws_cognito_user_pools{
	tenant: Tenant!
	name: String!
	description: String
	port: Int!
	sendEdges: [Edge]
	app: ManagedApp!
	metadata: AWSJSON
}

type DicomTcpOutboundNode implements NodeInterface @aws_cognito_user_pools{
	tenant: Tenant!
	name: String!
	description: String
	remoteHost: String!
	remotePort: Int!
	receiveEdges: [Edge]
	app: ManagedApp!
	metadata: AWSJSON
}

type Edge @aws_cognito_user_pools{
	tenant: Tenant!
	name: String!
	description: String
	source: Node!
	target: Node!
	messageType: String!
	metadata: AWSJSON
	kmsKey: KmsKey!
	queue: AWSURL!
}

input EdgeInput {
	name: String!
	description: String
	kmsKey: String
	source: String!
	target: String!
	metadata: AWSJSON
}

type EdgeResult @aws_cognito_user_pools{
	items: [Edge]
	nextToken: String
	scannedCount: Int
}

type ExternalApp implements AppInterface @aws_cognito_user_pools{
	tenant: Tenant!
	name: String!
	description: String
	nodes: [ExternalNode]
	account: String
	authType: AppAuthType!
	config: AWSJSON
}

type ExternalNode implements NodeInterface @aws_cognito_user_pools{
	tenant: Tenant!
	name: String!
	description: String
	sendEdges: [Edge]
	sendMessageType: String!
	receiveEdges: [Edge]
	receiveMessageType: String!
	app: ExternalApp!
	metadata: AWSJSON
}

type Hl7MllpInboundNode implements NodeInterface @aws_cognito_user_pools{
	tenant: Tenant!
	name: String!
	description: String
	port: Int!
	sendEdges: [Edge]
	app: ManagedApp!
	metadata: AWSJSON
}

type Hl7MllpOutboundNode implements NodeInterface @aws_cognito_user_pools{
	tenant: Tenant!
	name: String!
	description: String
	remoteHost: String!
	remotePort: Int!
	receiveEdges: [Edge]
	app: ManagedApp!
	metadata: AWSJSON
}

type KmsKey @aws_cognito_user_pools{
	tenant: Tenant!
	name: String!
	description: String
	arn: String!
}

input KmsKeyInput {
	name: String!
	description: String
}

type KmsKeyResult {
	items: [KmsKey]
	nextToken: String
	scannedCount: Int
}

type ManagedApp implements AppInterface @aws_cognito_user_pools{
	tenant: Tenant!
	name: String!
	description: String
	nodes: [ManagedNode]
	iso: String!
	config: AWSJSON
}

union ManagedNode = DicomTcpInboundNode | DicomTcpOutboundNode | Hl7MllpInboundNode | Hl7MllpOutboundNode

type MessageType {
	tenant: Tenant!
	name: String!
	auditor: String!
	transformerTemplate: String!
	bitmapperTemplate: String!
	requirements: [String!]!
	owner: MessageTypeOwner!
}

enum MessageTypeOwner {
	system
	tenant
}

input MessageTypeInput {
	name: String!
	auditor: String!
	transformerTemplate: String!
	bitmapperTemplate: String!
	requirements: [String!]!
}

type MessageTypeResult {
	items: [MessageType]
	nextToken: String
	scannedCount: Int
}

type Mutation @aws_cognito_user_pools{
	AppNotification(tenant: String!, name: String!): App!
	DeleteNode(tenant: String!, node: String!): Node
	DeleteEdge(tenant: String!, edge: String!): Edge
	DeleteApp(tenant: String!, app: String!): App
	EdgeNotification(tenant: String!, name: String!): Notification!
	NodeNotification(tenant: String!, name: String!): Notification!
	PutDicomTcpInboundNode(tenant: String!, app: String!, node: NodeInput!, port: Int!): DicomTcpInboundNode!
	PutDicomTcpOutboundNode(tenant: String!, app: String!, node: NodeInput!, remoteHost: String!, remotePort: Int!): DicomTcpOutboundNode!
	PutEdge(tenant: String!, edge: EdgeInput!): Edge!
	PutExternalApp(tenant: String!, app: AppInput!, authType: AppAuthType!, account: String): ExternalApp!
	PutExternalNode(tenant: String!, app: String!, node: NodeInput!, receiveMessageType: String!, sendMessageType: String!): ExternalNode!
	PutHl7MllpInboundNode(tenant: String!, app: String!,node: NodeInput!, port: Int!): Hl7MllpInboundNode!
	PutHl7MllpOutboundNode(tenant: String!, app: String!,node: NodeInput!, remoteHost: String!, remotePort: Int!): Hl7MllpOutboundNode!
	PutKmsKey(tenant: String!, key: KmsKeyInput!): KmsKey!
	PutManagedApp(tenant: String!, app: AppInput!): ManagedApp!
	PutMessageType(tenant: String!, type: MessageTypeInput!): MessageType!
	PutRouterNode(tenant: String!, app: String!, node: NodeInput!, messageType: String!, bitmapper: String!, routeTable: AWSJSON!): RouterNode!
	PutTenant(tenant: TenantInput!): Tenant!
	PutTransNode(tenant: String!, app: String!, node: NodeInput!, receiveMessageType: String!, sendMessageType: String!, transformer: String): TransNode!
	PutXTenantSendingApp(tenant: String!, app: AppInput!, receivingTenant: String!): XTenantSendingApp!
	PutXTenantSendingNode(tenant: String!, app: String!, node: NodeInput!, receiveMessageType: String!, sendMessageType: String!, transformer: String): XTenantSendingNode!
	AddUserToTenant(tenant: String!, user: UserInput!): User!
	@aws_iam @aws_cognito_user_pools
	ResetAppPassword(tenant: String!, name: String!): App!
}

union Node =  DicomTcpInboundNode | DicomTcpOutboundNode | ExternalNode | Hl7MllpInboundNode | Hl7MllpOutboundNode | RouterNode | TransNode | XTenantReceivingNode | XTenantSendingNode

input NodeInput {
	name: String!
	description: String
	metadata: AWSJSON
}

interface NodeInterface @aws_cognito_user_pools{
	name: String!
	description: String
	tenant: Tenant!
	metadata: AWSJSON
}

type NodeResult @aws_cognito_user_pools{
	items: [Node]
	nextToken: String
	scannedCount: Int
}

type Query @aws_cognito_user_pools{
	GetMessageType(tenant: String!, name: String!): MessageType!
	GetUsersForTenant(tenant: String!): [UserResult]
	GetUser(email: AWSEmail): User
	SearchNodes(
		tenant: String!
		partialName: Boolean,
		name: String,
		filter: String,
		filterValue: String,
		nextToken: String,
		limit: Int
	): NodeResult
	SearchEdges(
		tenant: String!
		source: String,
		target: String,
		filter: String,
		filterValue: String,
		nextToken: String,
		limit: Int
	): EdgeResult
	SearchApps(
		tenant: String!
		partialName: Boolean,
		name: String,
		filter: String,
		filterValue: String,
		nextToken: String,
		limit: Int
	): AppResult
	ListKeys(
		tenant: String!
		limit: Int
		nextToken: String
	): KmsKeyResult
	ListMessageTypes(tenant: String!, nextToken: String, limit: Int): MessageTypeResult
	ValidateFunction(tenant: String!, messageType: String!, function: String!, args: AWSJSON, kwargs: AWSJSON): ValidateFunctionResult
}

enum Region {
	us_east_1
	us_east_2
	us_west_1
	us_west_2
	af_south_1
	ap_east_1
	ap_south_1
	ap_northeast_1
	ap_northeast_2
	ap_northeast_3
	ap_southeast_1
	ap_southeast_2
	ca_central_1
	eu_central_1
	eu_west_1
	eu_west_2
	eu_south_1
	eu_west_3
	eu_north_1
	me_south_1
	sa_east_1
	us_gov_east_1
	us_gov_west_1
}

type RouterNode implements NodeInterface {
	tenant: Tenant!
	name: String!
	description: String
	sendEdges: [Edge]
	messageType: String!
	receiveEdges: [Edge]
	metadata: AWSJSON
	bitmapper: String!
	routeTable: AWSJSON!
}

type Notification {
	itemType: String!
	message: AWSJSON!
	tenant: String!
}

type Subscription @aws_cognito_user_pools{
	appDeleted(tenant: String!, name: String): Notification
		@aws_subscribe(mutations: ["DeleteApp"])
	appUpdated(tenant: String!, name: String): Notification
		@aws_subscribe(mutations: [
			"AppNotification",
			"PutExternalApp",
			"PutManagedApp",
			"ResetAppPassword"
		])
	edgeDeleted(tenant: String!, name: String): Notification
		@aws_subscribe(mutations: ["DeleteEdge"])
	edgeUpdated(tenant: String!, name: String): Notification
		@aws_subscribe(mutations: ["EdgeNotification", "PutEdge"])
	nodeDeleted(tenant: String!, name: String): Notification
		@aws_subscribe(mutations: ["DeleteNode"])
	nodeUpdated(tenant: String!, name: String): Notification
		@aws_subscribe(mutations: [
			"NodeNotification",
			"PutDicomTcpInboundNode",
			"PutDicomTcpOutboundNode",
			"PutExternalNode",
			"PutHl7MllpInboundNode",
			"PutHl7MllpOutboundNode"
		])
}

type Tenant @aws_cognito_user_pools{
	name: String!
	defaultKmsKey: KmsKey!
	defaultRegion: Region!
	billingInfo: AWSJSON
}

input TenantInput @aws_cognito_user_pools{
	name: String!
	defaultRegion: Region!
	billingInfo: AWSJSON
}

type TransNode implements NodeInterface {
	tenant: Tenant!
	name: String!
	description: String
	sendEdges: [Edge]
	sendMessageType: String!
	receiveEdges: [Edge]
	receiveMessageType: String!
	metadata: AWSJSON
	transformer: String
}

type User @aws_cognito_user_pools{
	tenant: Tenant!
	email: AWSEmail!
	name: String!
	role: UserRole!
	status: UserStatus!
	invitationToken: String!
	activeDate: String
	invitationDate: String
}

input UserInput {
	firstName: String!
	lastName: String!
	email: String!
	role: UserRole!
}

type UserResult @aws_cognito_user_pools{
	items: [User]
	nextToken: String
	scannedCount: Int
}

enum UserRole {
	admin
	user
}

enum UserStatus {
	active
	invited
	suspended
}

type ValidateFunctionResult {
	result: String!
	stdout: String!
}

type XTenantReceivingApp implements AppInterface @aws_cognito_user_pools{
	tenant: Tenant!
	sendingTenant: String!
	name: String!
	description: String
	nodes: [XTenantReceivingNode]
	config: AWSJSON
}

type XTenantReceivingNode implements NodeInterface @aws_cognito_user_pools{
	tenant: Tenant!
	name: String!
	description: String
	sendEdges: [Edge]
	messageType: String!
	metadata: AWSJSON
	app: XTenantReceivingApp!
}

type XTenantSendingApp implements AppInterface @aws_cognito_user_pools{
	tenant: Tenant!
	receivingTenant: String!
	name: String!
	description: String
	nodes: [XTenantSendingNode]
	config: AWSJSON
}

type XTenantSendingNode implements NodeInterface @aws_cognito_user_pools{
	tenant: Tenant!
	name: String!
	description: String
	receiveEdges: [Edge]
	receiveMessageType: String!
	sendMessageType: String!
	metadata: AWSJSON
	app: XTenantSendingApp!
	transformer: String
}
