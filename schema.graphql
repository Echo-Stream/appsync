union App = ManagedApp | ExternalApp | XTenantReceivingApp | XTenantSendingApp

enum AppAuthType {
	x_account
	cognito
}

input AppInput {
	name: String!
	config: AWSJSON
	description: String
}

interface AppInterface {
	tenant: Tenant!
	name: String!
	description: String
	config: AWSJSON
}

type AppNotification @aws_cognito_user_pools
@aws_iam {
	itemType: ItemType!
	tenant: String!
	operation: DbOperation!
	node: String
	app: String!
}

type AppResult @aws_cognito_user_pools {
	items: [App]
	lastEvaluatedKey: AWSJSON
	scannedCount: Int
}

enum AvailableIntegrations {
	alert_to_clickup_task
}

type CognitoUser @aws_cognito_user_pools {
	tenant: Tenant!
	name: String!
	role: String!
}

enum ContentEncoding {
	deflate
	gzip
}

enum DbOperation {
	MODIFY
	CREATE
	REMOVE
}

type DockerConfig @aws_cognito_user_pools {
	imageUrl: String!
	username: String
	password: String
}

input DockerConfigInput {
	username: String
	password: String
	imageUrl: String!
}

type Edge @aws_cognito_user_pools {
	tenant: Tenant!
	description: String
	source: Node!
	target: Node!
	messageType: MessageType!
	metadata: AWSJSON
	kmsKey: KmsKey!
	queue: AWSURL!
	lastModifiedBy: String
	lastModifiedAt: String
}

input EdgeInput {
	description: String
	kmsKey: String
	source: String!
	target: String!
	metadata: AWSJSON
}

type EdgeResult @aws_cognito_user_pools {
	items: [Edge]
	lastEvaluatedKey: AWSJSON
	scannedCount: Int
}

type ExternalApp implements AppInterface @aws_cognito_user_pools {
	tenant: Tenant!
	name: String!
	description: String
	nodes: [ExternalNode]
	account: String
	authType: AppAuthType!
	config: AWSJSON
	lastModifiedBy: String
	lastModifiedAt: String
}

type ExternalNode implements NodeInterface @aws_cognito_user_pools {
	tenant: Tenant!
	name: String!
	description: String
	sendEdges: [Edge]
	sendMessageType: MessageType!
	receiveEdges: [Edge]
	receiveMessageType: MessageType!
	app: ExternalApp!
	metadata: AWSJSON
	lastModifiedBy: String
	lastModifiedAt: String
}

type Function @aws_cognito_user_pools @aws_iam {
	tenant: Tenant!
	name: String!
	code: String!
	description: String!
	argumentMessageType: MessageType!
	resultMessageType: MessageType!
	system: Boolean!
	type: FunctionType!
}

input FunctionInput {
	name: String!
	code: String!
	description: String!
	argumentMessageType: String!
	resultMessageType: String!
	type: FunctionType!
}

type FunctionResult @aws_cognito_user_pools {
	items: [Function]
	lastEvaluatedKey: AWSJSON
	scannedCount: Int
}

enum FunctionType {
	bitmapper
	transformer
}

type Healthcheck @aws_cognito_user_pools {
	test: String!
	interval: String!
	timeout: String!
	retries: Int!
	start_period: String!
}

input HealthcheckInput {
	test: String!
	interval: String!
	timeout: String!
	retries: Int!
	start_period: String!
}

type HostMount @aws_cognito_user_pools {
	containerPath: String!
	hostPath: String!
	description: String
}

input HostMountInput @aws_cognito_user_pools {
	containerPath: String!
	hostPath: String!
	description: String
}

type HostMountRequirement @aws_cognito_user_pools {
	containerPath: String!
	description: String
}

input HostMountRequirementInput @aws_cognito_user_pools {
	containerPath: String!
	description: String
}

type Integration @aws_cognito_user_pools @aws_iam {
	name: AvailableIntegrations!
	description: String!
	config: AWSJSON!
	enabled: Boolean!
}

type IntegrationDefinition @aws_cognito_user_pools @aws_iam {
	configTemplate: AWSJSON!
	name: AvailableIntegrations!
	description: String!
	form: AWSJSON
	icon: AWSURL
}

enum ItemType {
	node
	edge
	app
	messageType
	user
	tenant
	kmsKey
	managedNodeType
	integration
}

type KmsKey @aws_cognito_user_pools {
	tenant: Tenant!
	name: String!
	description: String
	arn: String!
	lastModifiedBy: String
	lastModifiedAt: String
}

input KmsKeyInput {
	name: String!
	description: String
}

type KmsKeyResult @aws_cognito_user_pools {
	items: [KmsKey]
	lastEvaluatedKey: AWSJSON
	scannedCount: Int
}

type LargeMessageStorage @aws_cognito_user_pools {
	presignedPost: PresignedPost!
	presignedGet: AWSURL!
}

enum LogLevel {
	DEBUG
	INFO
	WARNING
	ERROR
}

type ManagedApp implements AppInterface @aws_cognito_user_pools {
	tenant: Tenant!
	name: String!
	description: String
	nodes: [ManagedNode]
	iso: String!
	config: AWSJSON
	instances: AWSJSON!
	lastModifiedBy: String
	lastModifiedAt: String
}

type ManagedNode implements NodeInterface @aws_cognito_user_pools {
	tenant: Tenant!
	name: String!
	description: String
	config: AWSJSON
	portMappings: [PortMapping!]
	sendEdges: [Edge]
	receiveEdges: [Edge]
	sendMessageType: MessageType
	receiveMessageType: MessageType
	managedNodeType: ManagedNodeType!
	app: ManagedApp!
	metadata: AWSJSON
	hostMounts: [HostMount!]
	logGroupName: String!
	lastModifiedBy: String
	lastModifiedAt: String
}

type ManagedNodeType @aws_cognito_user_pools {
	tenant: Tenant!
	name: String!
	description: String
	dockerConfig: DockerConfig!
	configTemplate: AWSJSON
	portMappingRequirements: [PortMappingRequirement!]
	sendMessageType: MessageType
	receiveMessageType: MessageType
	hostMountRequirements: [HostMountRequirement!]
	volumes: [String!]
	system: Boolean!
	lastModifiedBy: String
	lastModifiedAt: String
	healthcheck: Healthcheck
}

input ManagedNodeTypeInput {
	name: String!
	description: String
	metadata: AWSJSON
	dockerConfig: DockerConfigInput!
	configTemplate: AWSJSON
	hostMountRequirements: [HostMountRequirementInput!]
	portMappingRequirements: [PortMappingRequirementInput!]
	volumes: [String!]
	sendMessageType: String
	receiveMessageType: String
	healthcheck: HealthcheckInput
}

type ManagedNodeTypeResult @aws_cognito_user_pools {
	items: [ManagedNodeType]
	lastEvaluatedKey: AWSJSON
	scannedCount: Int
}

type MessageType @aws_cognito_user_pools {
	tenant: Tenant!
	name: String!
	auditor: String!
	transformerTemplate: String!
	bitmapperTemplate: String!
	requirements: [String!]!
	system: Boolean!
	lastModifiedBy: String
	lastModifiedAt: String
}

input MessageTypeInput {
	name: String!
	auditor: String!
	transformerTemplate: String!
	bitmapperTemplate: String!
	requirements: [String!]!
}

type MessageTypeResult @aws_cognito_user_pools {
	items: [MessageType]
	lastEvaluatedKey: AWSJSON
	scannedCount: Int
}

type Mutation @aws_cognito_user_pools {
	SubscribeToSns(tenant: String!, endpoint: String!, protocol: SnsSubscriptionProtocol!): SnsSubscription!
	UnsubscribeFromSns(tenant: String, arn: String!): SnsSubscription!
	ConfirmSnsSubscription(tenant: String!, token: String!, endpoint: String!): SnsSubscription!
	DeleteTenant(tenant: String!): Tenant!
	DeleteNode(tenant: String!, node: String!): Node!
	DeleteEdge(tenant: String!, source: String!, target: String!): Edge!
	DeleteFunction(tenant: String!, name: String!): Function!
	DeleteApp(tenant: String!, app: String!): App!
	DeleteMessageType(tenant: String!, name: String!): MessageType!
	DeleteManagedNodeType(tenant: String!, name: String!): ManagedNode!
	RegenerateAppIso(tenant: String!, app: String!): ManagedApp!
	DeregisterManagedAppInstance(tenant: String!, instance: String!): String!
	NotifyApp(
		tenant: String!,
		operation: DbOperation!,
		app: String!,
		itemType: String!
	): AppNotification!
		@aws_iam
	NotifyUI(
		tenant: String!,
		operation: DbOperation!,
		modifiedBy: String!,
		itemType: String!
	): UINotification!
		@aws_iam
	PurgeQueue(tenant: String!, source: String!, target: String!): Edge!
	PutFunction(tenant: String!, function: FunctionInput!): Function!
	PutManagedNode(
		tenant: String!,
		app: String!,
		node: NodeInput!,
		config: AWSJSON!,
		portMappings: [PortMappingInput!],
		managedNodeType: String!,
		hostMounts: [HostMountInput!]
	): ManagedNode!
	PutManagedNodeType(tenant: String!, type: ManagedNodeTypeInput!): ManagedNodeType!
	PutEdge(tenant: String!, edge: EdgeInput!): Edge!
	MoveEdge(
		tenant: String!,
		source: String!,
		target: String!,
		oldSource: String!,
		oldTarget: String!
	): Edge!
	PutExternalApp(
		tenant: String!,
		app: AppInput!,
		authType: AppAuthType!,
		account: String
	): ExternalApp!
	PutExternalNode(
		tenant: String!,
		app: String,
		node: NodeInput!,
		receiveMessageType: String!,
		sendMessageType: String!
	): ExternalNode!
	PutKmsKey(tenant: String!, key: KmsKeyInput!): KmsKey!
	PutManagedApp(tenant: String!, app: AppInput!): ManagedApp!
	PutMessageType(tenant: String!, type: MessageTypeInput!): MessageType!
	PutRouterNode(
		tenant: String!,
		node: NodeInput!,
		messageType: String!,
		bitmapper: String,
		routeTable: AWSJSON!,
		bitmapperFunction: String
	): RouterNode!
	PutTenant(name: String!, region: Region!, billingInfo: AWSJSON): Tenant!
	PutTransNode(
		tenant: String!,
		node: NodeInput!,
		receiveMessageType: String!,
		sendMessageType: String,
		transformer: String,
		transformerFunction: String
	): TransNode!
	PutXTenantReceivingApp(tenant: String!, app: AppInput!, sendingTenant: String!): XTenantReceivingApp!
	PutXTenantSendingApp(
		tenant: String!,
		app: AppInput!,
		receivingTenant: String!,
		receivingApp: String!
	): XTenantSendingApp!
	PutXTenantSendingNode(
		tenant: String!,
		app: String,
		node: NodeInput!,
		receiveMessageType: String!,
		sendMessageType: String,
		transformer: String,
		transformerFunction: String
	): XTenantSendingNode!
	AddUserToTenant(tenant: String!, user: UserInput!): User!
		@aws_iam
@aws_cognito_user_pools
	ResetAppPassword(tenant: String!, name: String!): App!
	PutIntegration(config: AWSJSON!, name: AvailableIntegrations!, enabled: Boolean!): Integration!
	RemoveIntegration(tenant: String!, name: AvailableIntegrations!): Integration!
}

union Node = ManagedNode | ExternalNode | RouterNode | TransNode | XTenantReceivingNode | XTenantSendingNode

type NodeCallableLogLine {
	timestamp: Int!
	message: String!
	ingestionTime: Int!
}

type NodeCallableLogResult {
	items: [NodeCallableLogLine]!
	nextToken: String
}

input NodeInput {
	name: String!
	description: String
	metadata: AWSJSON
}

interface NodeInterface {
	name: String!
	description: String
	tenant: Tenant!
	metadata: AWSJSON
	lastModifiedBy: String
	lastModifiedAt: String
}

type NodeResult @aws_cognito_user_pools {
	items: [Node]
	lastEvaluatedKey: AWSJSON
	scannedCount: Int
}

type PortMapping @aws_cognito_user_pools {
	description: String!
	hostPort: Int!
	containerPort: Int!
}

input PortMappingInput {
	hostPort: Int!
	containerPort: Int!
}

type PortMappingRequirement @aws_cognito_user_pools {
	description: String!
	containerPort: Int!
}

input PortMappingRequirementInput {
	containerPort: Int!
	description: String!
}

type PresignedPost @aws_cognito_user_pools {
	url: AWSURL
	fields: AWSJSON
	expiration: AWSTimestamp
}

type Query @aws_cognito_user_pools {
	GetLargeMessageStorage(tenant: String!, contentEncoding: ContentEncoding, count: Int): [LargeMessageStorage!]!
	GetMessageType(tenant: String!, name: String!): MessageType!
	GetUsersForTenant(tenant: String!): [User]
	GetUser: User
	GetTenant: Tenant!
	GetTenantUser(email: AWSEmail!): User
	SearchNodes(
		tenant: String!,
		partialName: Boolean,
		name: String,
		filter: String,
		filterValue: String,
		startKey: AWSJSON,
		limit: Int
	): NodeResult
		@aws_cognito_user_pools
@aws_iam
	SearchEdges(
		tenant: String!,
		source: String,
		target: String,
		filter: String,
		filterValue: String,
		startKey: AWSJSON,
		limit: Int
	): EdgeResult
	SearchApps(
		tenant: String!,
		partialName: Boolean,
		name: String,
		filter: String,
		filterValue: String,
		startKey: AWSJSON,
		limit: Int
	): AppResult
		@aws_cognito_user_pools
		@aws_iam
	ListFunctions(tenant: String!, limit: Int, startKey: AWSJSON): FunctionResult
	ListKeys(tenant: String!, limit: Int, startKey: AWSJSON): KmsKeyResult
	ListMessageTypes(tenant: String!, startKey: String, limit: Int): MessageTypeResult
	ListManagedNodeTypes(tenant: String!, startKey: String, limit: Int): ManagedNodeTypeResult
	ListSnsSubscriptions(tenant: String!): [SnsSubscription]!
	ValidateFunction(
		tenant: String!,
		function: String!,
		loggingLevel: LogLevel,
		sourceMessageType: String!,
		targetMessageType: String!,
		args: AWSJSON,
		kwargs: AWSJSON
	): ValidateFunctionResult
	GetNodeCallableLogs(
		tenant: String!,
		startTime: Int!,
		endTime: Int,
		node: String!,
		limit: Int,
		nextToken: String
	): NodeCallableLogResult!
	GetInstalledIntegration(tenant: String!, name: AvailableIntegrations!): Integration
	ListInstalledIntegrations(tenant: String!): [Integration!]
	GetIntegrationDefinition(tenant: String!, name: AvailableIntegrations): IntegrationDefinition!
	ListAvailableIntegrations(tenant: String!): [AvailableIntegrations]!
}

enum Region {
	us_east_1
	us_east_2
	us_west_1
	us_west_2
	af_south_1
	ap_east_1
	ap_south_1
	ap_northeast_1
	ap_northeast_2
	ap_northeast_3
	ap_southeast_1
	ap_southeast_2
	ca_central_1
	eu_central_1
	eu_west_1
	eu_west_2
	eu_south_1
	eu_west_3
	eu_north_1
	me_south_1
	sa_east_1
	us_gov_east_1
	us_gov_west_1
}

type RouterNode implements NodeInterface @aws_cognito_user_pools {
	tenant: Tenant!
	name: String!
	description: String
	sendEdges: [Edge]
	sendMessageType: MessageType!
	receiveEdges: [Edge]
	receiveMessageType: MessageType!
	metadata: AWSJSON
	bitmapper: String!
	routeTable: AWSJSON!
	bitmapperFunction: Function
	lastModifiedBy: String
	lastModifiedAt: String
}

type SnsSubscription @aws_cognito_user_pools {
	protocol: SnsSubscriptionProtocol!
	endpoint: String!
	arn: String!
	tenant: Tenant!
}

enum SnsSubscriptionProtocol {
	https
	email
	email_json
}

enum SnsSubscriptionStatus {
	PendingConfirmation
	Confirmed
}

type Subscription @aws_cognito_user_pools {
	appNotifications(tenant: String!, app: String!): AppNotification
		@aws_subscribe(mutations: ["NotifyApp"])
	uiNotifications(tenant: String!): UINotification
		@aws_subscribe(mutations: ["NotifyUI"])
}

type Tenant @aws_cognito_user_pools {
	name: String!
	region: String!
	billingInfo: AWSJSON
	alertSnsTopic: String!
	integrations: [Integration]
	lastModifiedBy: String
	lastModifiedAt: String
}

type TransNode implements NodeInterface @aws_cognito_user_pools {
	tenant: Tenant!
	name: String!
	description: String
	sendEdges: [Edge]
	sendMessageType: MessageType!
	receiveEdges: [Edge]
	receiveMessageType: MessageType!
	metadata: AWSJSON
	transformer: String
	transformerFunction: Function
	lastModifiedBy: String
	lastModifiedAt: String
}

type UINotification @aws_cognito_user_pools
@aws_iam {
	itemType: ItemType!
	tenant: String!
	operation: DbOperation!
	modifiedBy: String!
}

type User @aws_cognito_user_pools {
	tenant: Tenant!
	email: AWSEmail!
	firstName: String!
	lastName: String!
	role: UserRole!
	status: UserStatus!
	invitationToken: String
	activeDate: String
	invitationDate: String
	lastModifiedBy: String
	lastModifiedAt: String
}

input UserInput {
	firstName: String!
	lastName: String!
	email: String!
	role: UserRole!
}

type UserResult @aws_cognito_user_pools {
	items: [User]
	lastEvaluatedKey: String
	scannedCount: Int
}

enum UserRole {
	admin
	user
	owner
}

enum UserStatus {
	active
	invited
	suspended
}

type ValidateFunctionResult @aws_cognito_user_pools {
	result: String!
	stdout: String!
}

type XTenantReceivingApp implements AppInterface @aws_cognito_user_pools {
	tenant: Tenant!
	sendingTenant: String!
	sendingApp: String
	name: String!
	description: String
	nodes: [XTenantReceivingNode]
	config: AWSJSON
	lastModifiedBy: String
	lastModifiedAt: String
}

type XTenantReceivingNode implements NodeInterface @aws_cognito_user_pools {
	tenant: Tenant!
	name: String!
	description: String
	sendEdges: [Edge]
	sendMessageType: MessageType!
	metadata: AWSJSON
	app: XTenantReceivingApp!
	lastModifiedBy: String
	lastModifiedAt: String
}

type XTenantSendingApp implements AppInterface @aws_cognito_user_pools {
	tenant: Tenant!
	receivingTenant: String!
	receivingApp: String!
	name: String!
	description: String
	nodes: [XTenantSendingNode]
	config: AWSJSON
	lastModifiedBy: String
	lastModifiedAt: String
}

type XTenantSendingNode implements NodeInterface @aws_cognito_user_pools {
	tenant: Tenant!
	name: String!
	description: String
	receiveEdges: [Edge]
	receiveMessageType: MessageType!
	metadata: AWSJSON
	app: XTenantSendingApp!
	transformer: String
	transformerFunction: Function
	lastModifiedBy: String
	lastModifiedAt: String
}
