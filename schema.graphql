# An Internal Node that emits alert messages.
type AlertEmitterNode implements Node @aws_cognito_user_pools {
	# When and who created.
	created: AtBy!
	
	# A human-readable description.
	description: String
	
	# When and who modified.
	lastModified: AtBy!
	
	# The name.
	name: String!
	
	# A list of the Edges messages are sent on.
	sendEdges: [Edge]
	
	# The MessageType that this Node is capable of sending.
	sendMessageType: MessageType!
	
	# The Tenant.
	tenant: Tenant!
}

# An Internal Node that emits audit messages.
type AuditEmitterNode implements Node @aws_cognito_user_pools {
	# When and who created.
	created: AtBy!

	# A human-readable description.
	description: String

	# When and who modified.
	lastModified: AtBy!

	# The name.
	name: String!

	# A list of the Edges messages are sent on.
	sendEdges: [Edge]

	# The MessageType that this Node is capable of sending.
	sendMessageType: MessageType!

	# The Tenant.
	tenant: Tenant!
}

# A programmatic user of the EchoStream API.
type ApiUser @aws_cognito_user_pools {
	# When and who created.
	created: AtBy!
	
	# The credentials required to log into Cognito to get JWT's.
	credentials: CognitoCredentials!
	
	# A human-readable description.
	description: String
	
	# When and who modified.
	lastModified: AtBy!
	
	# The role.
	role: ApiUserRole!
	
	# The Tenant.
	tenant: Tenant!
	
	# The username.
	username: String!

	# Deletes this.
	Delete: Boolean!

	# Lists the changes.
	ListChanges(
		# The end date/time (inclusive) to list changes for in ISO8601 format. Defaults to now.
		endDateTime: AWSDateTime,

		# The lastEvaluatedKey from a previous ChangeResult. Used when paginating.
		exclusiveStartKey: AWSJSON,

		# Used for limiting the number of results when paginating. Defaults to "all".
		limit: Int, 

		# True for ascending results, False for descending result. Defaults to True.
		sortAscending: Boolean,

		# The start date/time (inclusive) to list changes for in ISO8601 format. Defaults to the beginning of time.
		startDateTime: AWSDateTime
	): ChangeResult!

	# Resets the password and returns this APIUser
	ResetPassword: ApiUser!

	# Updates and returns this APIUser
	Update(
		# A human-readable description. Null is ignored.
		description: String,

		# The new role. Null is ignored.
		role: ApiUserRole
	): ApiUser!
}

# A (possibly) paginated result set.
type ApiUserResult @aws_cognito_user_pools {
	# The list of APIUsers.
	echos: [ApiUser]

	# Used during pagination. Only present if more results are available.
	lastEvaluatedKey: AWSJSON

	# The number of records scanned to obtain the contained results.
	scannedCount: Int
}

# The allowed roles for an API User
enum ApiUserRole {
	# All operations EXCEPT deleting the tenant.
	admin

	# Only get and list operations are allowed, as well as retriving attributes.
	read_only

	# All operations EXCEPT manipulating users or deleting the tenant.
	user
}

interface App @aws_cognito_user_pools {
	# When and who created.
	created: AtBy!

	# A human-readable description.
	description: String

	# When and who modified.
	lastModified: AtBy!

	# The name.
	name: String!

	# The Tenant.
	tenant: Tenant!

	# Deletes this App and all of its Nodes.
	Delete(
		# If sending Edges attached to Nodes in this App should be drained. Defaults to True.
		drainEdges: Boolean
	): Boolean!

	# Lists the changes.
	ListChanges(
		# The end date/time (inclusive) to list changes for in ISO8601 format. Defaults to now.
		endDateTime: AWSDateTime,

		# The lastEvaluatedKey from a previous ChangeResult. Used when paginating.
		exclusiveStartKey: AWSJSON,

		# Used for limiting the number of results when paginating. Defaults to "all".
		limit: Int, 

		# True for ascending results, False for descending result. Defaults to True.
		sortAscending: Boolean,

		# The start date/time (inclusive) to list changes for in ISO8601 format. Defaults to the beginning of time.
		startDateTime: AWSDateTime
	): ChangeResult!
}

type AppChangeReceiverNode implements Node @aws_cognito_user_pools {
	app: App!

	# When and who created.
	created: AtBy!

	# A human-readable description.
	description: String

	# When and who modified.
	lastModified: AtBy!

	# The name.
	name: String!

	# The Edge that messages are received on.
	receiveEdge: Edge!

	# The MessageType that this Node is capable of receiving.
	receiveMessageType: MessageType!

	# The Tenant.
	tenant: Tenant!

	# Creates persistent audit records.
	CreateAuditRecords(
		# The name of the MessageType of the auditRecords.
		messageType: String!,

		# The list of audit records to create
		auditRecords: [AuditRecord!]!
	): Boolean!
}

type AppChangeRouterNode implements Node @aws_cognito_user_pools {
	# When and who created.
	created: AtBy!

	# A human-readable description.
	description: String

	# When and who modified.
	lastModified: AtBy!

	# The name.
	name: String!

	# The Edge that messages are received on.
	receiveEdge: Edge!

	# The MessageType that this Node is capable of receiving.
	receiveMessageType: MessageType!

	# A list of the Edges messages are sent on.
	sendEdges: [Edge]

	# The MessageType that this Node is capable of sending.
	sendMessageType: MessageType!

	# The Tenant.
	tenant: Tenant!
}

# A (possibly) paginated result set.
type AppResult @aws_cognito_user_pools {
	# The list of Apps.
	echos: [App]

	# Used during pagination. Only present if more results are available.
	lastEvaluatedKey: AWSJSON

	# The number of records scanned to obtain the contained results.
	scannedCount: Int
}

# Defines when and who. Used for creation and last modified stamps.
type AtBy @aws_cognito_user_pools {
	# When.
	at: AWSDateTime

	# Who.
	by: String
}

input AuditRecord {
	attributes: AWSJSON
	datetime: AWSDateTime!
	previousTrackingIds: [String!]
	sourceNode: String
	trackingId: String!
}

type AwsCredentials @aws_cognito_user_pools {
	accessKeyId: String!
	expiration: AWSDateTime!
	secretAccessKey: String!
	sessionToken: String!
}

type BitmapperFunction implements Function @aws_cognito_user_pools {
	argumentMessageType: MessageType!
	code: String!

	# When and who created.
	created: AtBy!

	# A human-readable description.
	description: String!

	# When and who modified.
	lastModified: AtBy!

	# The name.
	name: String!

	# README in MarkDown format.
	readme: String

	# The list of Python requirements, in pip format.
	requirements: [String!]

	# True if this is an EchoStream system resource.
	system: Boolean

	# The Tenant.
	tenant: Tenant

	# Deletes this.
	Delete: Boolean!
	# Lists the changes.
	ListChanges(
		# The end date/time (inclusive) to list changes for in ISO8601 format. Defaults to now.
		endDateTime: AWSDateTime,

		# The lastEvaluatedKey from a previous ChangeResult. Used when paginating.
		exclusiveStartKey: AWSJSON,

		# Used for limiting the number of results when paginating. Defaults to "all".
		limit: Int, 

		# True for ascending results, False for descending result. Defaults to True.
		sortAscending: Boolean,

		# The start date/time (inclusive) to list changes for in ISO8601 format. Defaults to the beginning of time.
		startDateTime: AWSDateTime
	): ChangeResult!
	Update(code: String, description: String, readme: String, requirements: [String!]): BitmapperFunction!

	# Validates the supplied code against the supplied message.
	Validate(
		# The message to use for validation.
		message: String!,

		# The code to validate.
		code: String!,

		# The loggingLevel to use duuring the validation. Defaults to INFO.
		loggingLevel: LogLevel
	): ValidationResult!
}

type BulkDataStorage @aws_cognito_user_pools {
	presignedGet: AWSURL!
	presignedPost: PresignedPost!
}

type Change @aws_cognito_user_pools {
	new: Echo
	old: Echo
}

type ChangeEmitterNode implements Node @aws_cognito_user_pools {
	# When and who created.
	created: AtBy!

	# A human-readable description.
	description: String

	# When and who modified.
	lastModified: AtBy!

	# The name.
	name: String!
	sendEdges: [Edge]!

	# The MessageType that this Node is capable of sending.
	sendMessageType: MessageType!

	# The Tenant.
	tenant: Tenant!
}

# A (possibly) paginated result set.
type ChangeResult @aws_cognito_user_pools {
	# The list of Changes.
	echos: [Change]!

	# Used during pagination. Only present if more results are available.
	lastEvaluatedKey: AWSJSON

	# The number of records scanned to obtain the contained results.
	scannedCount: Int
}

type CognitoCredentials @aws_cognito_user_pools {
	clientId: String!
	password: String!
	userPoolId: String!
	username: String!
}

enum ContentEncoding {
	gzip
	deflate
}

type CrossAccountApp implements App @aws_cognito_user_pools {
	account: String!
	config: AWSJSON

	# When and who created.
	created: AtBy!

	# The credentials required to log into Cognito to get JWT's.
	credentials: CognitoCredentials!

	# A human-readable description.
	description: String
	iamPolicy: AWSJSON!

	# When and who modified.
	lastModified: AtBy!

	# The name.
	name: String!

	nodes: [RemoteAppNode]!

	tableAccess: Boolean!

	# The Tenant.
	tenant: Tenant!

	# Deletes this App and all of its Nodes.
	Delete(
		# If sending Edges attached to Nodes in this App should be drained. Defaults to True.
		drainEdges: Boolean
	): Boolean!

	# Returns that AwsCredentials required to access the EchoStream resources assigned to this App.
	GetAwsCredentials(
		# The length of time, in seconds, that the returned credentials are valid for. Between 900 and 43,200. Defaults to 3,600.
		duration: Int
	): AwsCredentials!

	# Lists the changes.
	ListChanges(
		# The end date/time (inclusive) to list changes for in ISO8601 format. Defaults to now.
		endDateTime: AWSDateTime,

		# The lastEvaluatedKey from a previous ChangeResult. Used when paginating.
		exclusiveStartKey: AWSJSON,

		# Used for limiting the number of results when paginating. Defaults to "all".
		limit: Int, 

		# True for ascending results, False for descending result. Defaults to True.
		sortAscending: Boolean,

		# The start date/time (inclusive) to list changes for in ISO8601 format. Defaults to the beginning of time.
		startDateTime: AWSDateTime
	): ChangeResult!

	ResetPassword: CrossAccountApp!

	Update(config: AWSJSON, description: String, tableAccess: Boolean): CrossAccountApp!
}

type CrossTenantReceivingApp implements App @aws_cognito_user_pools {
	# When and who created.
	created: AtBy!
	# A human-readable description.
	description: String
	# When and who modified.
	lastModified: AtBy!
	# The name.
	name: String!
	nodes: [CrossTenantReceivingNode]
	sendingApp: String
	sendingTenant: String!
	# The Tenant.
	tenant: Tenant!

	# Deletes this App and all of its Nodes.
	Delete(
		# If sending Edges attached to Nodes in this App should be drained. Defaults to True.
		drainEdges: Boolean
	): Boolean!
	# Lists the changes.
	ListChanges(
		# The end date/time (inclusive) to list changes for in ISO8601 format. Defaults to now.
		endDateTime: AWSDateTime,

		# The lastEvaluatedKey from a previous ChangeResult. Used when paginating.
		exclusiveStartKey: AWSJSON,

		# Used for limiting the number of results when paginating. Defaults to "all".
		limit: Int, 

		# True for ascending results, False for descending result. Defaults to True.
		sortAscending: Boolean,

		# The start date/time (inclusive) to list changes for in ISO8601 format. Defaults to the beginning of time.
		startDateTime: AWSDateTime
	): ChangeResult!
	Update(description: String): CrossTenantReceivingApp!
}

type CrossTenantReceivingNode implements Node @aws_cognito_user_pools {
	app: CrossTenantReceivingApp!
	# When and who created.
	created: AtBy!
	# A human-readable description.
	description: String
	# When and who modified.
	lastModified: AtBy!
	# The name.
	name: String!
	# A list of the Edges messages are sent on.
	sendEdges: [Edge]
	# The MessageType that this Node is capable of sending.
	sendMessageType: MessageType!
	# The Tenant.
	tenant: Tenant!

	# Deletes this Node and all of its Edges.
	Delete(
		# If sending Edges attached to this Nodes should be drained. Defaults to True.
		drainEdges: Boolean
	): Boolean!
	# Lists the changes.
	ListChanges(
		# The end date/time (inclusive) to list changes for in ISO8601 format. Defaults to now.
		endDateTime: AWSDateTime,

		# The lastEvaluatedKey from a previous ChangeResult. Used when paginating.
		exclusiveStartKey: AWSJSON,

		# Used for limiting the number of results when paginating. Defaults to "all".
		limit: Int, 

		# True for ascending results, False for descending result. Defaults to True.
		sortAscending: Boolean,

		# The start date/time (inclusive) to list changes for in ISO8601 format. Defaults to the beginning of time.
		startDateTime: AWSDateTime
	): ChangeResult!
	Update(description: String): CrossTenantReceivingNode!
}

type CrossTenantSendingApp implements App @aws_cognito_user_pools {
	# When and who created.
	created: AtBy!
	# A human-readable description.
	description: String
	# When and who modified.
	lastModified: AtBy!
	# The name.
	name: String!
	nodes: [CrossTenantSendingNode]
	receivingApp: String!
	receivingTenant: String!
	# The Tenant.
	tenant: Tenant!

	# Deletes this App and all of its Nodes.
	Delete(
		# If sending Edges attached to Nodes in this App should be drained. Defaults to True.
		drainEdges: Boolean
	): Boolean!
	# Lists the changes.
	ListChanges(
		# The end date/time (inclusive) to list changes for in ISO8601 format. Defaults to now.
		endDateTime: AWSDateTime,

		# The lastEvaluatedKey from a previous ChangeResult. Used when paginating.
		exclusiveStartKey: AWSJSON,

		# Used for limiting the number of results when paginating. Defaults to "all".
		limit: Int, 

		# True for ascending results, False for descending result. Defaults to True.
		sortAscending: Boolean,

		# The start date/time (inclusive) to list changes for in ISO8601 format. Defaults to the beginning of time.
		startDateTime: AWSDateTime
	): ChangeResult!
	Update(description: String): CrossTenantSendingApp!
}

type CrossTenantSendingNode implements Node @aws_cognito_user_pools {
	app: CrossTenantSendingApp!
	config: AWSJSON
	# When and who created.
	created: AtBy!
	# A human-readable description.
	description: String
	inlineTransformer: String
	# When and who modified.
	lastModified: AtBy!
	loggingLevel: LogLevel
	managedTransformer: TransformerFunction
	# The name.
	name: String!
	# A list of the Edges messages are received on.
	receiveEdges: [Edge]
	# The MessageType that this Node is capable of receiving.
	receiveMessageType: MessageType!
	# The list of Python requirements, in pip format.
	requirements: [String!]
	sequentialProcessing: Boolean
	# The Tenant.
	tenant: Tenant!

	# Deletes this Node and all of its Edges.
	Delete(
		# If sending Edges attached to this Nodes should be drained. Defaults to True.
		drainEdges: Boolean
	): Boolean!
	# Lists the changes.
	ListChanges(
		# The end date/time (inclusive) to list changes for in ISO8601 format. Defaults to now.
		endDateTime: AWSDateTime,

		# The lastEvaluatedKey from a previous ChangeResult. Used when paginating.
		exclusiveStartKey: AWSJSON,

		# Used for limiting the number of results when paginating. Defaults to "all".
		limit: Int, 

		# True for ascending results, False for descending result. Defaults to True.
		sortAscending: Boolean,

		# The start date/time (inclusive) to list changes for in ISO8601 format. Defaults to the beginning of time.
		startDateTime: AWSDateTime
	): ChangeResult!
	ListLogEvents(endDateTime: AWSDateTime, filterPattern: String, limit: Int, nextToken: String, startDateTime: AWSDateTime): LogEventResults!
	Update(config: AWSJSON, description: String, inlineTransformer: String, loggingLevel: LogLevel, managedTransformer: String, requirements: [String!], sequentialProcessing: Boolean): CrossTenantSendingNode!
	# Validates the supplied code against the supplied message.
	Validate(
		# The message to use for validation.
		message: String!,
		# The code to validate.
		code: String!,
		# The loggingLevel to use duuring the validation. Defaults to INFO.
		loggingLevel: LogLevel
	): ValidationResult!
}

type DeadLetterEmitterNode implements Node @aws_cognito_user_pools {
	# When and who created.
	created: AtBy!
	# A human-readable description.
	description: String
	# When and who modified.
	lastModified: AtBy!
	# The name.
	name: String!
	# A list of the Edges messages are sent on.
	sendEdges: [Edge]
	# The MessageType that this Node is capable of sending.
	sendMessageType: MessageType!
	# The Tenant.
	tenant: Tenant!
}

union Echo = AlertEmitterNode | AppChangeReceiverNode | AppChangeRouterNode | AuditEmitterNode | BitmapperFunction | ChangeEmitterNode | CrossAccountApp | CrossTenantReceivingApp | CrossTenantReceivingNode | CrossTenantSendingApp | CrossTenantSendingNode | DeadLetterEmitterNode | Edge |  ExternalApp | ExternalNode | KmsKey | LogEmitterNode | ManagedApp | ManagedNode | ManagedNodeType | MessageType | RouterNode | Tenant | TimerNode | TransformerFunction | TransformerNode

type Edge @aws_cognito_user_pools {
	# When and who created.
	created: AtBy!
	# A human-readable description.
	description: String
	draining: Boolean!
	kmsKey: KmsKey
	# When and who modified.
	lastModified: AtBy!
	maxReceiveCount: Int
	messageCounts: MessageCounts!
	messageType: MessageType!
	queue: AWSURL!
	source: Node!
	target: Node!
	# The Tenant.
	tenant: Tenant!

	Delete(drain: Boolean): Boolean!
	# Lists the changes.
	ListChanges(
		# The end date/time (inclusive) to list changes for in ISO8601 format. Defaults to now.
		endDateTime: AWSDateTime,

		# The lastEvaluatedKey from a previous ChangeResult. Used when paginating.
		exclusiveStartKey: AWSJSON,

		# Used for limiting the number of results when paginating. Defaults to "all".
		limit: Int, 

		# True for ascending results, False for descending result. Defaults to True.
		sortAscending: Boolean,

		# The start date/time (inclusive) to list changes for in ISO8601 format. Defaults to the beginning of time.
		startDateTime: AWSDateTime
	): ChangeResult!
	Move(source: String!, target: String!): Edge!
	Purge: Boolean!
	Update(description: String): Edge!
}

# A (possibly) paginated result set.
type EdgeResult @aws_cognito_user_pools {
	# The list of Edges.
	echos: [Edge]
	# Used during pagination. Only present if more results are available.
	lastEvaluatedKey: AWSJSON
	# The number of records scanned to obtain the contained results.
	scannedCount: Int
}

type ExternalApp implements App @aws_cognito_user_pools {
	config: AWSJSON
	# When and who created.
	created: AtBy!
	# The credentials required to log into Cognito to get JWT's.
	credentials: CognitoCredentials!
	# A human-readable description.
	description: String
	# When and who modified.
	lastModified: AtBy!
	# The name.
	name: String!
	nodes: [RemoteAppNode]!
	tableAccess: Boolean!
	# The Tenant.
	tenant: Tenant!

	# Deletes this App and all of its Nodes.
	Delete(
		# If sending Edges attached to Nodes in this App should be drained. Defaults to True.
		drainEdges: Boolean
	): Boolean!
	# Returns that AwsCredentials required to access the EchoStream resources assigned to this App.
	GetAwsCredentials(
		# The length of time, in seconds, that the returned credentials are valid for. Between 900 and 43,200. Defaults to 3,600.
		duration: Int
	): AwsCredentials!
	# Lists the changes.
	ListChanges(
		# The end date/time (inclusive) to list changes for in ISO8601 format. Defaults to now.
		endDateTime: AWSDateTime,

		# The lastEvaluatedKey from a previous ChangeResult. Used when paginating.
		exclusiveStartKey: AWSJSON,

		# Used for limiting the number of results when paginating. Defaults to "all".
		limit: Int, 

		# True for ascending results, False for descending result. Defaults to True.
		sortAscending: Boolean,

		# The start date/time (inclusive) to list changes for in ISO8601 format. Defaults to the beginning of time.
		startDateTime: AWSDateTime
	): ChangeResult!
	ResetPassword: ExternalApp!
	Update(config: AWSJSON, description: String, tableAccess: Boolean): ExternalApp!
}

type ExternalNode implements Node @aws_cognito_user_pools {
	app: RemoteApp!
	config: AWSJSON
	# When and who created.
	created: AtBy!
	# A human-readable description.
	description: String
	# When and who modified.
	lastModified: AtBy!
	# The name.
	name: String!
	# A list of the Edges messages are received on.
	receiveEdges: [Edge]
	# The MessageType that this Node is capable of receiving.
	receiveMessageType: MessageType
	# A list of the Edges messages are sent on.
	sendEdges: [Edge]
	# The MessageType that this Node is capable of sending.
	sendMessageType: MessageType
	# The Tenant.
	tenant: Tenant!

	# Creates persistent audit records.
	CreateAuditRecords(
		# The name of the MessageType of the auditRecords.
		messageType: String!,
		# The list of audit records to create
		auditRecords: [AuditRecord!]!
	): Boolean!
	# Deletes this Node and all of its Edges.
	Delete(
		# If sending Edges attached to this Nodes should be drained. Defaults to True.
		drainEdges: Boolean
	): Boolean!
	# Lists the changes.
	ListChanges(
		# The end date/time (inclusive) to list changes for in ISO8601 format. Defaults to now.
		endDateTime: AWSDateTime,

		# The lastEvaluatedKey from a previous ChangeResult. Used when paginating.
		exclusiveStartKey: AWSJSON,

		# Used for limiting the number of results when paginating. Defaults to "all".
		limit: Int, 

		# True for ascending results, False for descending result. Defaults to True.
		sortAscending: Boolean,

		# The start date/time (inclusive) to list changes for in ISO8601 format. Defaults to the beginning of time.
		startDateTime: AWSDateTime
	): ChangeResult!
	Update(config: AWSJSON, description: String): ExternalNode!
}

interface Function @aws_cognito_user_pools {
	argumentMessageType: MessageType!
	code: String!
	# When and who created.
	created: AtBy!
	# A human-readable description.
	description: String!
	# The name.
	name: String!
	# When and who modified.
	lastModified: AtBy!
	# README in MarkDown format.
	readme: String
	# The list of Python requirements, in pip format.
	requirements: [String!]
	# True if this is an EchoStream system resource.
	system: Boolean
	# The Tenant.
	tenant: Tenant

	# Deletes this.
	Delete: Boolean!
	# Lists the changes.
	ListChanges(
		# The end date/time (inclusive) to list changes for in ISO8601 format. Defaults to now.
		endDateTime: AWSDateTime,

		# The lastEvaluatedKey from a previous ChangeResult. Used when paginating.
		exclusiveStartKey: AWSJSON,

		# Used for limiting the number of results when paginating. Defaults to "all".
		limit: Int, 

		# True for ascending results, False for descending result. Defaults to True.
		sortAscending: Boolean,

		# The start date/time (inclusive) to list changes for in ISO8601 format. Defaults to the beginning of time.
		startDateTime: AWSDateTime
	): ChangeResult!
	# Validates the supplied code against the supplied message.
	Validate(
		# The message to use for validation.
		message: String!,
		# The code to validate.
		code: String!,
		# The loggingLevel to use duuring the validation. Defaults to INFO.
		loggingLevel: LogLevel
	): ValidationResult!
}

# A (possibly) paginated result set.
type FunctionResult @aws_cognito_user_pools {
	# The list of Functions.
	echos: [Function]
	# Used during pagination. Only present if more results are available.
	lastEvaluatedKey: AWSJSON
	# The number of records scanned to obtain the contained results.
	scannedCount: Int
}

type GraphLayout @aws_cognito_user_pools {
	# The name.
	name: String!
	layout: AWSJSON!
}

type KmsKey @aws_cognito_user_pools {
	arn: String!
	# When and who created.
	created: AtBy!
	# A human-readable description.
	description: String
	# When and who modified.
	lastModified: AtBy!
	# The name.
	name: String!
	# The Tenant.
	tenant: Tenant!

	# Deletes this.
	Delete: Boolean!
	# Lists the changes.
	ListChanges(
		# The end date/time (inclusive) to list changes for in ISO8601 format. Defaults to now.
		endDateTime: AWSDateTime,

		# The lastEvaluatedKey from a previous ChangeResult. Used when paginating.
		exclusiveStartKey: AWSJSON,

		# Used for limiting the number of results when paginating. Defaults to "all".
		limit: Int, 

		# True for ascending results, False for descending result. Defaults to True.
		sortAscending: Boolean,

		# The start date/time (inclusive) to list changes for in ISO8601 format. Defaults to the beginning of time.
		startDateTime: AWSDateTime
	): ChangeResult!
	Update(description: String): KmsKey!
}

# A (possibly) paginated result set.
type KmsKeyResult @aws_cognito_user_pools {
	# The list of KmsKeys.
	echos: [KmsKey]
	# Used during pagination. Only present if more results are available.
	lastEvaluatedKey: AWSJSON
	# The number of records scanned to obtain the contained results.
	scannedCount: Int
}

type LogEmitterNode implements Node @aws_cognito_user_pools {
	# When and who created.
	created: AtBy!
	# A human-readable description.
	description: String
	# When and who modified.
	lastModified: AtBy!
	# The name.
	name: String!
	# A list of the Edges messages are sent on.
	sendEdges: [Edge]
	# The MessageType that this Node is capable of sending.
	sendMessageType: MessageType!
	# The Tenant.
	tenant: Tenant!
}

type LoginUser @aws_cognito_user_pools {
	activeAt: String
	# When and who created.
	created: AtBy!
	email: AWSEmail!
	firstName: String!
	# When and who modified.
	lastModified: AtBy!
	lastName: String!
	tenantUsers: [TenantUser!]
}

type LogEvent @aws_cognito_user_pools {
	timestamp: AWSDateTime!
	message: String!
	ingestionTime: AWSDateTime!
}

type LogEventResults @aws_cognito_user_pools {
	events: [LogEvent]!
	nextToken: String
}

enum LogLevel {
	DEBUG
	ERROR
	INFO
	WARNING
}

type ManagedApp implements App @aws_cognito_user_pools {
	config: AWSJSON
	# When and who created.
	created: AtBy!
	# The credentials required to log into Cognito to get JWT's.
	credentials: CognitoCredentials!
	# A human-readable description.
	description: String
	# A list of registered instances.
	managedInstances: [ManagedInstance]
	# The iso image. Used to install and setup the ManagedApp virtual machine.
	iso: String!
	# When and who modified.
	lastModified: AtBy!
	# The name.
	name: String!
	nodes: [ManagedAppNode]!
	tableAccess: Boolean!
	# The Tenant.
	tenant: Tenant!

	# Deletes this App and all of its Nodes.
	Delete(
		# If sending Edges attached to Nodes in this App should be drained. Defaults to True.
		drainEdges: Boolean
	): Boolean!
	DeregisterManagedInstance(instanceId: String!): Boolean!
	# Returns that AwsCredentials required to access the EchoStream resources assigned to this App.
	GetAwsCredentials(
		# The length of time, in seconds, that the returned credentials are valid for. Between 900 and 43,200. Defaults to 3,600.
		duration: Int
	): AwsCredentials!
	# Lists the changes.
	ListChanges(
		# The end date/time (inclusive) to list changes for in ISO8601 format. Defaults to now.
		endDateTime: AWSDateTime,

		# The lastEvaluatedKey from a previous ChangeResult. Used when paginating.
		exclusiveStartKey: AWSJSON,

		# Used for limiting the number of results when paginating. Defaults to "all".
		limit: Int, 

		# True for ascending results, False for descending result. Defaults to True.
		sortAscending: Boolean,

		# The start date/time (inclusive) to list changes for in ISO8601 format. Defaults to the beginning of time.
		startDateTime: AWSDateTime
	): ChangeResult!
	ResetPassword: ManagedApp!
	Update(config: AWSJSON, description: String, tableAccess: Boolean): ManagedApp!
}

union ManagedAppNode = AppChangeReceiverNode | ManagedNode

type ManagedInstance @aws_cognito_user_pools {
	activationId: String!
	hostname: String!
	instanceId: String!
	ipAddress: AWSIPAddress!
	lastPingDateTime: AWSDateTime!
	pingStatus: PingStatus!
	registrationDate: AWSDateTime!
}

type ManagedNode implements Node @aws_cognito_user_pools {
	app: ManagedApp!
	config: AWSJSON
	# When and who created.
	created: AtBy!
	# A human-readable description.
	description: String
	# When and who modified.
	lastModified: AtBy!
	loggingLevel: LogLevel
	managedNodeType: ManagedNodeType!
	mounts: [Mount!]
	# The name.
	name: String!
	ports: [Port!]
	# A list of the Edges messages are received on.
	receiveEdges: [Edge]
	# The MessageType that this Node is capable of receiving.
	receiveMessageType: MessageType
	# A list of the Edges messages are sent on.
	sendEdges: [Edge]
	# The MessageType that this Node is capable of sending.
	sendMessageType: MessageType
	# The Tenant.
	tenant: Tenant!

	# Creates persistent audit records.
	CreateAuditRecords(
		# The name of the MessageType of the auditRecords.
		messageType: String!,
		# The list of audit records to create
		auditRecords: [AuditRecord!]!
	): Boolean!
	# Deletes this Node and all of its Edges.
	Delete(
		# If sending Edges attached to this Nodes should be drained. Defaults to True.
		drainEdges: Boolean
	): Boolean!
	# Lists the changes.
	ListChanges(
		# The end date/time (inclusive) to list changes for in ISO8601 format. Defaults to now.
		endDateTime: AWSDateTime,

		# The lastEvaluatedKey from a previous ChangeResult. Used when paginating.
		exclusiveStartKey: AWSJSON,

		# Used for limiting the number of results when paginating. Defaults to "all".
		limit: Int, 

		# True for ascending results, False for descending result. Defaults to True.
		sortAscending: Boolean,

		# The start date/time (inclusive) to list changes for in ISO8601 format. Defaults to the beginning of time.
		startDateTime: AWSDateTime
	): ChangeResult!
	ListLogEvents(endDateTime: AWSDateTime, filterPattern: String, limit: Int, nextToken: String, startDateTime: AWSDateTime): LogEventResults!
	Update(config: AWSJSON, description: String, loggingLevel: LogLevel, mounts: [MountInput!], ports: [PortInput!]): ManagedNode!
}

type ManagedNodeType @aws_cognito_user_pools {
	configTemplate: AWSJSON
	# When and who created.
	created: AtBy!
	# A human-readable description.
	description: String!
	imageUri: String!
	# When and who modified.
	lastModified: AtBy!
	mountRequirements: [MountRequirement!]
	# The name.
	name: String!
	portRequirements: [PortRequirement!]
	# README in MarkDown format.
	readme: String
	# The MessageType that this Node is capable of receiving.
	receiveMessageType: MessageType
	# The MessageType that this Node is capable of sending.
	sendMessageType: MessageType
	# True if this is an EchoStream system resource.
	system: Boolean
	# The Tenant.
	tenant: Tenant

	# Deletes this.
	Delete: Boolean!
	# Lists the changes.
	ListChanges(
		# The end date/time (inclusive) to list changes for in ISO8601 format. Defaults to now.
		endDateTime: AWSDateTime,

		# The lastEvaluatedKey from a previous ChangeResult. Used when paginating.
		exclusiveStartKey: AWSJSON,

		# Used for limiting the number of results when paginating. Defaults to "all".
		limit: Int, 

		# True for ascending results, False for descending result. Defaults to True.
		sortAscending: Boolean,

		# The start date/time (inclusive) to list changes for in ISO8601 format. Defaults to the beginning of time.
		startDateTime: AWSDateTime
	): ChangeResult!
	Update(description: String, imageUri: String, readme: String): ManagedNodeType!
}

# A (possibly) paginated result set.
type ManagedNodeTypeResult @aws_cognito_user_pools {
	# The list of ManagedNodeTypes.
	echos: [ManagedNodeType]
	# Used during pagination. Only present if more results are available.
	lastEvaluatedKey: AWSJSON
	# The number of records scanned to obtain the contained results.
	scannedCount: Int
}

type MessageCounts @aws_cognito_user_pools {
	approximateNumberOfMessages: Int!
	approximateNumberOfMessagesDelayed: Int!
	approximateNumberOfMessagesNotVisible: Int!
}

type MessageType @aws_cognito_user_pools {
	auditor: String!
	bitmapperTemplate: String!
	# When and who created.
	created: AtBy!
	# A human-readable description.
	description: String!,
	# When and who modified.
	lastModified: AtBy!
	# The name.
	name: String!
	# README in MarkDown format.
	readme: String
	# The list of Python requirements, in pip format.
	requirements: [String!]
	sampleMessage: String!
	# True if this is an EchoStream system resource.
	system: Boolean
	# The Tenant.
	tenant: Tenant
	transformerTemplate: String!

	# Deletes this.
	Delete: Boolean!
	# Lists the changes.
	ListChanges(
		# The end date/time (inclusive) to list changes for in ISO8601 format. Defaults to now.
		endDateTime: AWSDateTime,

		# The lastEvaluatedKey from a previous ChangeResult. Used when paginating.
		exclusiveStartKey: AWSJSON,

		# Used for limiting the number of results when paginating. Defaults to "all".
		limit: Int, 

		# True for ascending results, False for descending result. Defaults to True.
		sortAscending: Boolean,

		# The start date/time (inclusive) to list changes for in ISO8601 format. Defaults to the beginning of time.
		startDateTime: AWSDateTime
	): ChangeResult!
	Update(auditor: String, bitmapperTemplate: String, description: String, readme: String, requirements: [String!], sampleMessage: String, transformerTemplate: String): MessageType!
	# Validates the supplied code against the supplied message.
	Validate(
		# The message to use for validation.
		message: String!,
		# The code to validate.
		code: String!,
		# The loggingLevel to use duuring the validation. Defaults to INFO.
		loggingLevel: LogLevel
	): ValidationResult!
}

# A (possibly) paginated result set.
type MessageTypeResult @aws_cognito_user_pools {
	# The list of MessageTypes.
	echos: [MessageType]
	# Used during pagination. Only present if more results are available.
	lastEvaluatedKey: AWSJSON
	# The number of records scanned to obtain the contained results.
	scannedCount: Int
}

type Mount @aws_cognito_user_pools {
	# A human-readable description.
	description: String!
	source: String
	target: String!
}

input MountInput {
	source: String
	target: String!
}

type MountRequirement @aws_cognito_user_pools {
	# A human-readable description.
	description: String!
	source: String
	target: String!
}

input MountRequirementInput {
	# A human-readable description.
	description: String!
	source: String
	target: String!
}

# Root Mutation
type Mutation @aws_cognito_user_pools {
	# Creates a new APIUser and returns it.
	CreateApiUser(
		# The Tenant to create the APIUser in.
		tenant: String!,
		# The role of the new API User.
		role: ApiUserRole!,
		# A human-readable description of the APIUser.
		# A human-readable description.
	description: String
	): ApiUser!

	CreateBitmapperFunction(
		tenant: String!,
		name: String!,
		code: String!,
		# A human-readable description.
		description: String!,
		argumentMessageType: String!,
		readme: String,
		# The list of Python requirements, in pip format.
		requirements: [String!]
	): BitmapperFunction!
	CreateCrossAccountApp(
		account: String!,
		tenant: String!,
		name: String!,
		config: AWSJSON,
		# A human-readable description.
		description: String,
		tableAccess: Boolean
	): CrossAccountApp!
	CreateCrossTenantReceivingApp(
		tenant: String!,
		name: String!,
		sendingTenant: String!
	): CrossTenantReceivingApp!
	CreateCrossTenantSendingApp(
		tenant: String!,
		name: String!,
		receivingTenant: String!,
		receivingApp: String!
	): CrossTenantSendingApp!
	CreateCrossTenantSendingNode(
		app: String!,
		name: String!,
		receiveMessageType: String!,
		tenant: String!,
		config: AWSJSON,
		# A human-readable description.
		description: String,
		inlineTransformer: String,
		loggingLevel: LogLevel,
		managedTransformer: String,
		# The list of Python requirements, in pip format.
		requirements: [String!]
		sendMessageType: String,
		sequentialProcessing: Boolean
	): CrossTenantSendingNode!
	CreateEdge(
		source: String!,
		target: String!,
		tenant: String!,
		# A human-readable description.
		description: String,
		kmsKey: String,
		maxReceiveCount: Int
	): Edge!
	CreateExternalApp(
		tenant: String!,
		name: String!,
		config: AWSJSON,
		# A human-readable description.
		description: String,
		tableAccess: Boolean
	): ExternalApp!
	CreateExternalNode(
		tenant: String!,
		app: String!,
		name: String!,
		receiveMessageType: String,
		sendMessageType: String
		# A human-readable description.
		description: String,
		config: AWSJSON
	): ExternalNode!
	CreateKmsKey(tenant: String!, 	name: String!, description: String): KmsKey!
	CreateManagedApp(
		name: String!, 
		tenant: String!,
		config: AWSJSON, 
		# A human-readable description.
		description: String
		tableAccess: Boolean
	): ManagedApp!
	CreateManagedNode(
		app: String!,
		managedNodeType: String!,
		name: String!,
		tenant: String!,
		config: AWSJSON,
		# A human-readable description.
		description: String,
		loggingLevel: LogLevel,
		mounts: [MountInput!],
		ports: [PortInput!]
	): ManagedNode!
	CreateManagedNodeType(
		# A human-readable description.
		description: String!,
		imageUri: String!
		name: String!,
		tenant: String!,
		configTemplate: AWSJSON,
		mountRequirements: [MountRequirementInput!],
		portRequirements: [PortRequirementInput!],
		readme: String,
		receiveMessageType: String,
		sendMessageType: String,
	): ManagedNodeType!
	CreateMessageType(
		auditor: String!,
		bitmapperTemplate: String!,
		# A human-readable description.
		description: String!,
		name: String!,
		sampleMessage: String!,
		tenant: String!,
		transformerTemplate: String!,
		readme: String,
		# The list of Python requirements, in pip format.
		requirements: [String!]
	): MessageType!
	CreateRouterNode(
		name: String!,
		receiveMessageType: String!,
		routeTable: AWSJSON!,
		tenant: String!,
		config: AWSJSON,
		# A human-readable description.
		description: String,
		inlineBitmapper: String,
		loggingLevel: LogLevel,
		managedBitmapper: String,
		# The list of Python requirements, in pip format.
		requirements: [String!]
	): RouterNode!
	CreateTenant(name: String!, region: String!, config: AWSJSON): Tenant!
	CreateTimerNode(
		name: String!,
		scheduleExpression: String!,
		tenant: String!,
		# A human-readable description.
		description: String
	): TimerNode!
	CreateTransformerFunction(
		tenant: String!,
		name: String!,
		code: String!,
		# A human-readable description.
		description: String!,
		argumentMessageType: String!,
		readme: String,
		requirements: [String!],
		returnMessageType: String
	): TransformerFunction!
	CreateTransformerNode(
		name: String!,
		receiveMessageType: String!,
		tenant: String!,
		config: AWSJSON,
		# A human-readable description.
		description: String,
		inlineTransformer: String,
		loggingLevel: LogLevel,
		managedTransformer: String,
		requirements: [String!],
		sendMessageType: String,
		sequentialProcessing: Boolean
	): TransformerNode!
}

interface Node @aws_cognito_user_pools {
	# When and who created.
	created: AtBy!
	# A human-readable description.
	description: String
	# When and who modified.
	lastModified: AtBy!
	# The name.
	name: String!
	# The Tenant.
	tenant: Tenant!
}

# A (possibly) paginated result set.
type NodeResult @aws_cognito_user_pools {
	# The list of Nodes.
	echos: [Node]
	# Used during pagination. Only present if more results are available.
	lastEvaluatedKey: AWSJSON
	# The number of records scanned to obtain the contained results.
	scannedCount: Int
}

enum PingStatus {
	ConnectionLost
	Inactive
	Online
}

type Port @aws_cognito_user_pools {
	containerPort: Int!
	# A human-readable description.
	description: String!
	hostAddress: AWSIPAddress
	hostPort: Int!
	protocol: Protocol!
}

input PortInput {
	containerPort: Int!
	# A human-readable description.
	description: String!
	hostAddress: AWSIPAddress
	hostPort: Int!
	protocol: Protocol!
}

type PortRequirement @aws_cognito_user_pools {
	containerPort: Int!
	# A human-readable description.
	description: String!
	protocol: Protocol!
}

input PortRequirementInput {
	containerPort: Int!
	# A human-readable description.
	description: String!
	protocol: Protocol!
}

type PresignedPost @aws_cognito_user_pools {
	expiration: AWSTimestamp!
	fields: AWSJSON!
	url: AWSURL!
}

enum Protocol {
	sctp
	tcp
	udp
}

# Root Query
type Query @aws_cognito_user_pools {
	GetApiUser(tenant: String!, username: String!): ApiUser
	GetApp(name: String!, tenant: String!): App

	# Gets between 1 and 100 BulkDataStorage objects.
	GetBulkDataStorage(
		# The Tenant to get the BulkDataStorage objects for.
		tenant: String!,
		# The content encoding to use for the returned BulkDataStorage.
		contentEncoding: ContentEncoding,
		# The number of BulkDataStorage objects to get. Must be between 1 and 100. Defaults to 1.
		count: Int
	): [BulkDataStorage!]!
	GetEdge(source: String!, target: String!, tenant: String!): Edge
	GetFunction(name: String!, tenant: String): Function
	GetKmsKey(name: String!, tenant: String!): KmsKey
	GetManagedNodeType(name: String!, tenant: String): ManagedNodeType
	GetMessageType(name: String!, tenant: String): MessageType
	GetNode(name: String!, tenant: String!): Node
	GetSupportedRegions: [String!]!
	GetTenant(tenant: String!): Tenant
	GetTenantUser(tenant: String!, email: AWSEmail!): TenantUser
	GetUser: LoginUser

	ListApiUsers(tenant: String!, exclusiveStartKey: AWSJSON, limit: Int): ApiUserResult!
	ListApps(tenant: String!, exclusiveStartKey: AWSJSON, limit: Int): AppResult!
	ListChanges(tenant: String!, endDateTime: AWSDateTime, exclusiveStartKey: AWSJSON, limit: Int, sortAscending: Boolean, startDateTime: AWSDateTime): ChangeResult!
	ListFunctions(exclusiveStartKey: AWSJSON, limit: Int, tenant: String): FunctionResult!
	ListKmsKeys(tenant: String!, exclusiveStartKey: AWSJSON, limit: Int): KmsKeyResult!
	ListNodes(tenant: String!, exclusiveStartKey: AWSJSON, limit: Int): NodeResult!
	ListManagedNodeTypes(exclusiveStartKey: AWSJSON, limit: Int, tenant: String): ManagedNodeTypeResult!
	ListMessageTypes(exclusiveStartKey: AWSJSON, limit: Int, tenant: String): MessageTypeResult!
	ListTenants(exclusiveStartKey: AWSJSON, limit: Int): TenantResult!
	ListTenantUsers(tenant: String!, exclusiveStartKey: AWSJSON, limit: Int): TenantUserResult!
}

union RemoteApp = CrossAccountApp | ExternalApp

union RemoteAppNode = AppChangeReceiverNode | ExternalNode

type RouterNode implements Node @aws_cognito_user_pools {
	config: AWSJSON
	# When and who created.
	created: AtBy!
	# A human-readable description.
	description: String
	inlineBitmapper: String
	# When and who modified.
	lastModified: AtBy!
	loggingLevel: LogLevel
	managedBitmapper: BitmapperFunction
	# The name.
	name: String!
	# A list of the Edges messages are received on.
	receiveEdges: [Edge]
	# The MessageType that this Node is capable of receiving.
	receiveMessageType: MessageType!
	# The list of Python requirements, in pip format.
	requirements: [String!]
	routeTable: AWSJSON!
	# A list of the Edges messages are sent on.
	sendEdges: [Edge]
	# The MessageType that this Node is capable of sending.
	sendMessageType: MessageType!
	# The Tenant.
	tenant: Tenant!

	# Deletes this Node and all of its Edges.
	Delete(
		# If sending Edges attached to this Nodes should be drained. Defaults to True.
		drainEdges: Boolean
	): Boolean!
	# Lists the changes.
	ListChanges(
		# The end date/time (inclusive) to list changes for in ISO8601 format. Defaults to now.
		endDateTime: AWSDateTime,

		# The lastEvaluatedKey from a previous ChangeResult. Used when paginating.
		exclusiveStartKey: AWSJSON,

		# Used for limiting the number of results when paginating. Defaults to "all".
		limit: Int, 

		# True for ascending results, False for descending result. Defaults to True.
		sortAscending: Boolean,

		# The start date/time (inclusive) to list changes for in ISO8601 format. Defaults to the beginning of time.
		startDateTime: AWSDateTime
	): ChangeResult!
	ListLogEvents(endDateTime: AWSDateTime, filterPattern: String, limit: Int, nextToken: String, startDateTime: AWSDateTime): LogEventResults!
	Update(config: AWSJSON, description: String, inlineBitmapper: String, loggingLevel: LogLevel, managedBitmapper: String, requirements: [String!], routeTable: AWSJSON): RouterNode!
	# Validates the supplied code against the supplied message.
	Validate(
		# The message to use for validation.
		message: String!,
		# The code to validate.
		code: String!,
		# The loggingLevel to use duuring the validation. Defaults to INFO.
		loggingLevel: LogLevel
	): ValidationResult!
}

type Tenant @aws_cognito_user_pools {
	config: AWSJSON
	# When and who created.
	created: AtBy!
	# A human-readable description.
	description: String
	# When and who modified.
	lastModified: AtBy!
	# The name.
	name: String!
	region: String!
	table: String!
	users: [TenantUser!]

	AddUser(email: String!, role: UserRole!): TenantUser!
	# Deletes this.
	Delete: Boolean!
	# Lists the changes.
	ListChanges(
		# The end date/time (inclusive) to list changes for in ISO8601 format. Defaults to now.
		endDateTime: AWSDateTime,

		# The lastEvaluatedKey from a previous ChangeResult. Used when paginating.
		exclusiveStartKey: AWSJSON,

		# Used for limiting the number of results when paginating. Defaults to "all".
		limit: Int, 

		# True for ascending results, False for descending result. Defaults to True.
		sortAscending: Boolean,

		# The start date/time (inclusive) to list changes for in ISO8601 format. Defaults to the beginning of time.
		startDateTime: AWSDateTime
	): ChangeResult!
	Update(config: AWSJSON, description: String): Tenant!
}

# A (possibly) paginated result set.
type TenantResult @aws_cognito_user_pools {
	# The list of Tenants.
	echos: [Tenant]
	# Used during pagination. Only present if more results are available.
	lastEvaluatedKey: AWSJSON
	# The number of records scanned to obtain the contained results.
	scannedCount: Int
}

type TenantUser @aws_cognito_user_pools {
	activeAt: String
	# When and who created.
	created: AtBy!
	email: AWSEmail!
	firstName: String
	graphLayouts: [GraphLayout!]
	invitationAt: String
	invitationToken: String
	# When and who modified.
	lastModified: AtBy!
	lastName: String
	role: UserRole!
	status: UserStatus!
	# The Tenant.
	tenant: Tenant!

	# Deletes this.
	Delete: Boolean!
	DeleteGraphLayout(name: String!): Boolean!
	# Lists the changes.
	ListChanges(
		# The end date/time (inclusive) to list changes for in ISO8601 format. Defaults to now.
		endDateTime: AWSDateTime,

		# The lastEvaluatedKey from a previous ChangeResult. Used when paginating.
		exclusiveStartKey: AWSJSON,

		# Used for limiting the number of results when paginating. Defaults to "all".
		limit: Int, 

		# True for ascending results, False for descending result. Defaults to True.
		sortAscending: Boolean,

		# The start date/time (inclusive) to list changes for in ISO8601 format. Defaults to the beginning of time.
		startDateTime: AWSDateTime
	): ChangeResult!
	SaveGraphLayout(name: String!, layout: AWSJSON!): GraphLayout!
	Update(role: UserRole, status: UserStatus): TenantUser!
}

# A (possibly) paginated result set.
type TenantUserResult @aws_cognito_user_pools {
	# The list of TenantUsers.
	echos: [TenantUser]
	# Used during pagination. Only present if more results are available.
	lastEvaluatedKey: AWSJSON
	# The number of records scanned to obtain the contained results.
	scannedCount: Int
}

type TimerNode implements Node @aws_cognito_user_pools {
	# When and who created.
	created: AtBy!
	# A human-readable description.
	description: String
	# When and who modified.
	lastModified: AtBy!
	# The name.
	name: String!
	scheduleExpression: String!
	# A list of the Edges messages are sent on.
	sendEdges: [Edge]
	# The MessageType that this Node is capable of sending.
	sendMessageType: MessageType!
	# The Tenant.
	tenant: Tenant!

	# Deletes this Node and all of its Edges.
	Delete(
		# If sending Edges attached to this Nodes should be drained. Defaults to True.
		drainEdges: Boolean
	): Boolean!
	# Lists the changes.
	ListChanges(
		# The end date/time (inclusive) to list changes for in ISO8601 format. Defaults to now.
		endDateTime: AWSDateTime,

		# The lastEvaluatedKey from a previous ChangeResult. Used when paginating.
		exclusiveStartKey: AWSJSON,

		# Used for limiting the number of results when paginating. Defaults to "all".
		limit: Int, 

		# True for ascending results, False for descending result. Defaults to True.
		sortAscending: Boolean,

		# The start date/time (inclusive) to list changes for in ISO8601 format. Defaults to the beginning of time.
		startDateTime: AWSDateTime
	): ChangeResult!
	Update(description: String): TimerNode!
}

type TransformerFunction implements Function @aws_cognito_user_pools {
	argumentMessageType: MessageType!
	code: String!
	# When and who created.
	created: AtBy!
	# A human-readable description.
	description: String!
	# When and who modified.
	lastModified: AtBy!
	# The name.
	name: String!
	# README in MarkDown format.
	readme: String
	# The list of Python requirements, in pip format.
	requirements: [String!]
	returnMessageType: MessageType
	# True if this is an EchoStream system resource.
	system: Boolean
	# The Tenant.
	tenant: Tenant

	# Deletes this.
	Delete: Boolean!
	# Lists the changes.
	ListChanges(
		# The end date/time (inclusive) to list changes for in ISO8601 format. Defaults to now.
		endDateTime: AWSDateTime,

		# The lastEvaluatedKey from a previous ChangeResult. Used when paginating.
		exclusiveStartKey: AWSJSON,

		# Used for limiting the number of results when paginating. Defaults to "all".
		limit: Int, 

		# True for ascending results, False for descending result. Defaults to True.
		sortAscending: Boolean,

		# The start date/time (inclusive) to list changes for in ISO8601 format. Defaults to the beginning of time.
		startDateTime: AWSDateTime
	): ChangeResult!
	Update(code: String, description: String, readme: String, requirements: [String!]): TransformerFunction!
	# Validates the supplied code against the supplied message.
	Validate(
		# The message to use for validation.
		message: String!,
		# The code to validate.
		code: String!,
		# The loggingLevel to use duuring the validation. Defaults to INFO.
		loggingLevel: LogLevel
	): ValidationResult!
}

type TransformerNode implements Node @aws_cognito_user_pools {
	config: AWSJSON
	# When and who created.
	created: AtBy!
	# A human-readable description.
	description: String
	inlineTransformer: String
	# When and who modified.
	lastModified: AtBy!
	loggingLevel: LogLevel
	managedTransformer: TransformerFunction
	# The name.
	name: String!
	# A list of the Edges messages are received on.
	receiveEdges: [Edge]
	# The MessageType that this Node is capable of receiving.
	receiveMessageType: MessageType!
	# The list of Python requirements, in pip format.
	requirements: [String!]
	# A list of the Edges messages are sent on.
	sendEdges: [Edge]
	# The MessageType that this Node is capable of sending.
	sendMessageType: MessageType
	sequentialProcessing: Boolean
	# The Tenant.
	tenant: Tenant!

	# Deletes this Node and all of its Edges.
	Delete(
		# If sending Edges attached to this Nodes should be drained. Defaults to True.
		drainEdges: Boolean
	): Boolean!
	# Lists the changes.
	ListChanges(
		# The end date/time (inclusive) to list changes for in ISO8601 format. Defaults to now.
		endDateTime: AWSDateTime,

		# The lastEvaluatedKey from a previous ChangeResult. Used when paginating.
		exclusiveStartKey: AWSJSON,

		# Used for limiting the number of results when paginating. Defaults to "all".
		limit: Int, 

		# True for ascending results, False for descending result. Defaults to True.
		sortAscending: Boolean,

		# The start date/time (inclusive) to list changes for in ISO8601 format. Defaults to the beginning of time.
		startDateTime: AWSDateTime
	): ChangeResult!
	ListLogEvents(endDateTime: AWSDateTime, filterPattern: String, limit: Int, nextToken: String, startDateTime: AWSDateTime): LogEventResults!
	Update(config: AWSJSON, description: String, inlineTransformer: String, loggingLevel: LogLevel, managedTransformer: String, requirements: [String!], sequentialProcessing: Boolean): TransformerNode!
	# Validates the supplied code against the supplied message.
	Validate(
		# The message to use for validation.
		message: String!,
		# The code to validate.
		code: String!,
		# The loggingLevel to use duuring the validation. Defaults to INFO.
		loggingLevel: LogLevel
	): ValidationResult!
}

enum UserRole {
	admin
	owner
	read_only
	user
}

enum UserStatus {
	active
	inactive
	invited
	pending
}

type ValidationResult @aws_cognito_user_pools {
	logs: String!
	result: AWSJSON!
	stdout: String!
}
