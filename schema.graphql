type ApiUser @aws_cognito_user_pools {
	tenant: Tenant!
	config: AWSJSON!
	role: ApiUserRole!
	username: String!
	description: String
}

type ApiUserResult @aws_cognito_user_pools {
	items: [ApiUser]
	lastEvaluatedKey: AWSJSON
	scannedCount: Int
}

enum ApiUserRole {
	user
	admin
	api_admin
	admin_read_only
	read_only
}

union App = CrossAccountApp | ExternalApp | ManagedApp | XTenantReceivingApp | XTenantSendingApp

interface AppInterface {
	tenant: Tenant!
	name: String!
	description: String
}

type AppNotification @aws_cognito_user_pools
@aws_iam {
	itemType: ItemType!
	tenant: String!
	operation: DbOperation!
	node: String
	app: String!
}

type AppResult @aws_cognito_user_pools {
	items: [App]
	lastEvaluatedKey: AWSJSON
	scannedCount: Int
}

enum AvailableIntegrations {
	alert_to_clickup_task
}

enum ContentEncoding {
	deflate
	gzip
}

type CrossAccountApp implements AppInterface @aws_cognito_user_pools {
	tenant: Tenant!
	name: String!
	config: AWSJSON
	description: String
	nodes: [ExternalNode]
	account: String
	lastModified: LastModified
}

enum DbOperation {
	MODIFY
	CREATE
	REMOVE
}

type DockerConfig @aws_cognito_user_pools {
	imageUrl: String!
	username: String
	password: String
}

input DockerConfigInput {
	username: String
	password: String
	imageUrl: String!
}

type Edge @aws_cognito_user_pools {
	tenant: Tenant!
	description: String
	source: Node!
	target: Node!
	messageType: MessageType!
	kmsKey: KmsKey!
	queue: AWSURL!
	lastModified: LastModified
}

type EdgeResult @aws_cognito_user_pools {
	items: [Edge]
	lastEvaluatedKey: AWSJSON
	scannedCount: Int
}

type ExternalApp implements AppInterface @aws_cognito_user_pools {
	tenant: Tenant!
	name: String!
	config: AWSJSON
	description: String
	nodes: [ExternalNode]
	lastModified: LastModified
}

type ExternalNode implements NodeInterface @aws_cognito_user_pools {
	tenant: Tenant!
	name: String!
	description: String
	sendEdges: [Edge]
	sendMessageType: MessageType
	receiveEdges: [Edge]
	receiveMessageType: MessageType
	app: ExternalApp!
	config: AWSJSON
	lastModified: LastModified
}

interface FunctionInterface {
	code: String!
	description: String!
	name: String!
	requirements: [String!]
	system: Boolean!
	tenant: Tenant
}

type BitmapperFunction implements FunctionInterface @aws_cognito_user_pool @aws_iam {
	argumentMessageType: MessageType!
	code: String!
	description: String!
	name: String!
	requirements: [String!]
	resultMessageType: MessageType!
	system: Boolean!
	tenant: Tenant
}

type TransformerFunction implements FunctionInterface @aws_cognito_user_pool @aws_iam {
	argumentMessageType: MessageType!
	code: String!
	description: String!
	name: String!
	requirements: [String!]
	system: Boolean!
	tenant: Tenant
}

union Function = BitmapperFunction | TransformerFunction

type FunctionResult @aws_cognito_user_pools {
	items: [Function]
	lastEvaluatedKey: AWSJSON
	scannedCount: Int
}

type Healthcheck @aws_cognito_user_pools {
	test: String!
	interval: String!
	timeout: String!
	retries: Int!
	startPeriod: String!
}

input HealthcheckInput {
	test: String!
	interval: String!
	timeout: String!
	retries: Int!
	startPeriod: String!
}

type HostMount @aws_cognito_user_pools {
	containerPath: String!
	hostPath: String!
	description: String!
}

input HostMountInput {
	containerPath: String!
	hostPath: String!
	description: String
}

type HostMountRequirement @aws_cognito_user_pools {
	containerPath: String!
	description: String!
}

input HostMountRequirementInput {
	containerPath: String!
	description: String!
}

type Integration @aws_cognito_user_pools
@aws_iam {
	name: AvailableIntegrations!
	description: String!
	config: AWSJSON!
	enabled: Boolean!
}

type IntegrationDefinition @aws_cognito_user_pools
@aws_iam {
	configTemplate: AWSJSON!
	name: AvailableIntegrations!
	description: String!
	form: AWSJSON
	icon: AWSURL
}

enum ItemType {
	node
	edge
	app
	messageType
	user
	tenant
	kmsKey
	managedNodeType
	integration
}

type KmsKey @aws_cognito_user_pools {
	tenant: Tenant!
	name: String!
	description: String
	arn: String!
	lastModified: LastModified
}

type KmsKeyResult @aws_cognito_user_pools {
	items: [KmsKey]
	lastEvaluatedKey: AWSJSON
	scannedCount: Int
}

type LargeMessageStorage @aws_cognito_user_pools {
	presignedPost: PresignedPost!
	presignedGet: AWSURL!
}

type LastModified @aws_cognito_user_pools {
	at: AWSDateTime
	by: String
}

enum LogLevel {
	DEBUG
	INFO
	WARNING
	ERROR
}

type ManagedInstance @aws_cognito_user_pools @aws_iam{
	activationId: String!
	hostname: String!
	instanceId: String!
	ipAddress: AWSIPAddress!
	lastPingDateTime: AWSDateTime!
	pingStatus: PingStatus!
	registrationDate: AWSDateTime!
}

type ManagedApp implements AppInterface @aws_cognito_user_pools {
	tenant: Tenant!
	name: String!
	config: AWSJSON
	description: String
	nodes: [ManagedNode]
	iso: String!
	instances: [ManagedInstance]
	lastModified: LastModified
}

type ManagedNode implements NodeInterface @aws_cognito_user_pools {
	tenant: Tenant!
	name: String!
	description: String
	config: AWSJSON
	portMappings: [PortMapping!]
	sendEdges: [Edge]
	receiveEdges: [Edge]
	sendMessageType: MessageType
	receiveMessageType: MessageType
	managedNodeType: ManagedNodeType!
	app: ManagedApp!
	hostMounts: [HostMount!]
	logGroupName: String!
	lastModified: LastModified
}

type ManagedNodeType @aws_cognito_user_pools {
	tenant: Tenant
	name: String!
	description: String
	dockerConfig: DockerConfig!
	configTemplate: AWSJSON
	portMappingRequirements: [PortMappingRequirement!]
	sendMessageType: MessageType
	receiveMessageType: MessageType
	hostMountRequirements: [HostMountRequirement!]
	volumes: [String!]
	system: Boolean!
	lastModified: LastModified
	healthcheck: Healthcheck
}

type ManagedNodeTypeResult @aws_cognito_user_pools {
	items: [ManagedNodeType]
	lastEvaluatedKey: AWSJSON
	scannedCount: Int
}

type MessageType @aws_cognito_user_pools {
	tenant: Tenant
	name: String!
	auditor: String!
	transformerTemplate: String!
	bitmapperTemplate: String!
	requirements: [String!]
	system: Boolean!
	lastModified: LastModified
}

type MessageTypeResult @aws_cognito_user_pools {
	items: [MessageType]
	lastEvaluatedKey: AWSJSON
	scannedCount: Int
}

type Mutation @aws_cognito_user_pools {
	PutApiUser(tenant: String!, role: ApiUserRole!, description: String): ApiUser!
	DeleteApiUser(tenant: String!, username: String!): Boolean!
	SubscribeToSns(tenant: String!, endpoint: String!, protocol: SnsSubscriptionProtocol!): SnsSubscription!
	UnsubscribeFromSns(tenant: String, arn: String!): SnsSubscription!
	ConfirmSnsSubscription(tenant: String!, token: String!, endpoint: String!): SnsSubscription!
  DeleteKmsKey(tenant: String!, name: String!): Boolean!
	DeleteTenant(tenant: String!): Boolean!
	DeleteNode(tenant: String!, node: String!, drainEdges: Boolean): Boolean!
	DeleteEdge(tenant: String!, source: String!, target: String!, drain: Boolean): Boolean!
	DeleteFunction(tenant: String!, name: String!): Boolean!
	DeleteApp(tenant: String!, app: String!, drainEdges:Boolean): Boolean!
	DeleteMessageType(tenant: String!, name: String!): Boolean!
	DeleteManagedNodeType(tenant: String!, name: String!): Boolean!
	RegenerateAppIso(tenant: String!, app: String!): ManagedApp!
	DeregisterManagedInstance(tenant: String!, instanceId: String!): Boolean!
	NotifyApp(
		tenant: String!,
		operation: DbOperation!,
		app: String!,
		itemType: String!
	): AppNotification!
		@aws_iam
	NotifyUI(
		tenant: String!,
		operation: DbOperation!,
		name: String!,
		modifiedBy: String!,
		itemType: String!
	): UINotification!
		@aws_iam
	PurgeEdge(tenant: String!, source: String!, target: String!): Boolean!
	PutBitmapperFunction(
		tenant: String!,
		name: String!,
		code: String!,
		description: String!,
		type: FunctionType!,
		argumentMessageType: String!,
		requirements: [String!]
	): BitmapperFunction!
	PutTransformerFunction(
		tenant: String!,
		name: String!,
		code: String!,
		description: String!,
		type: FunctionType!,
		argumentMessageType: String!,
		resultMessageType: String!,
		requirements: [String!]
	): TransformerFunction!
	PutManagedNode(
		tenant: String!,
		app: String!,
		name: String!,
		managedNodeType: String!,
		description: String,
		config: AWSJSON,
		portMappings: [PortMappingInput!],
		hostMounts: [HostMountInput!]
	): ManagedNode!
	PutManagedNodeType(
		tenant: String!, 
		name: String!,
		description: String,
		dockerConfig: DockerConfigInput!,
		configTemplate: AWSJSON,
		hostMountRequirements: [HostMountRequirementInput!],
		portMappingRequirements: [PortMappingRequirementInput!],
		volumes: [String!],
		sendMessageType: String,
		receiveMessageType: String,
		healthcheck: HealthcheckInput
	): ManagedNodeType!
	PutEdge(
		tenant: String!, 
		source: String!, 
		target: String!, 
		kmsKey: String, 
		description: String
	): Edge!
	MoveEdge(
		tenant: String!,
		source: String!,
		target: String!,
		oldSource: String!,
		oldTarget: String!
	): Edge!
	PutCrossAccountApp(
		tenant: String!,
		name: String!,
		description: String,
		account: String!
	): ExternalApp!
	PutExternalApp(
		tenant: String!,
		name: String!,
		description: String,
	): ExternalApp!
	PutExternalNode(
		tenant: String!,
		app: String!,
		name: String!,
		receiveMessageType: String,
		sendMessageType: String
		description: String,
		config: AWSJSON,
	): ExternalNode!
	PutKmsKey(tenant: String!, 	name: String!, description: String): KmsKey!
	PutManagedApp(tenant: String!, name: String!, description: String): ManagedApp!
	PutMessageType(
		tenant: String!, 
		name: String!,
		auditor: String!,
		transformerTemplate: String!,
		bitmapperTemplate: String!,
		requirements: [String!]
	): MessageType!
	PutRouterNode(
		tenant: String!,
		name: String!,
		receiveMessageType: String!,
		inlineBitmapper: String,
		routeTable: AWSJSON!,
		managedBitmapper: String
		description: String,
		config: AWSJSON,
		requirements: [String!]
	): RouterNode!
	PutTenant(name: String!, region: Region!, config: AWJSON): Tenant!
	PutTransformerNode(
		tenant: String!,
		name: String!,
		receiveMessageType: String!,
		description: String,
		config: AWSJSON,
		sendMessageType: String,
		inlineTransformer: String,
		managedTransformer: String,
		sequentialProcessing: Boolean,
		requirements: [String!]
	): TransformerNode!
	PutXTenantReceivingApp(
		tenant: String!, 
		name: String!, 
		sendingTenant: String!, 
		description: String
	): XTenantReceivingApp!
	PutXTenantSendingApp(
		tenant: String!,
		name: String!,
		description: String,
		receivingTenant: String!,
		receivingApp: String!
	): XTenantSendingApp!
	PutXTenantSendingNode(
		tenant: String!,
		app: String!,
		name: String!,
		receiveMessageType: String!,
		description: String,
		config: AWSJSON,
		sendMessageType: String,
		inlineTransformer: String,
		managedTransformer: String,
		sequentialProcessing: Boolean,
		requirements: [String!]
	): XTenantSendingNode!
	UpdateTenantUser(
		tenant: String!,
		user: AWSEmail!,
		role: UserRole,
		status: UserStatus
	): TenantUser!
	RemoveTenantUser(tenant: String!, user: AWSEmail!): Boolean!
	AddUserToTenant(
		tenant: String!, 
		firstName: String!,
		lastName: String!,
		email: String!,
		role: UserRole!
	): TenantUser!
	@aws_iam @aws_cognito_user_pools
	ResetAppPassword(tenant: String!, app: String!): App!
	PutIntegration(config: AWSJSON!, name: AvailableIntegrations!, enabled: Boolean!): Integration!
	RemoveIntegration(tenant: String!, name: AvailableIntegrations!): Boolean!
}

union Node = ExternalNode | ManagedNode | RouterNode | TransformerNode | XTenantReceivingNode | XTenantSendingNode

type NodeCallableLogLine {
	timestamp: Int!
	message: String!
	ingestionTime: Int!
}

type NodeCallableLogResult {
	items: [NodeCallableLogLine]!
	nextToken: String
}

interface NodeInterface {
	description: String
	lastModified: LastModified
	name: String!
	tenant: Tenant!
}

type NodeResult @aws_cognito_user_pools {
	items: [Node]
	lastEvaluatedKey: AWSJSON
	scannedCount: Int
}

enum PingStatus {
	Online
	ConnectionLost
	Inactive
}

type PortMapping @aws_cognito_user_pools {
	description: String!
	hostPort: Int!
	containerPort: Int!
}

input PortMappingInput {
	hostPort: Int!
	containerPort: Int!
}

type PortMappingRequirement @aws_cognito_user_pools {
	description: String!
	containerPort: Int!
}

input PortMappingRequirementInput {
	containerPort: Int!
	description: String!
}

type PresignedPost @aws_cognito_user_pools {
	url: AWSURL
	fields: AWSJSON
	expiration: AWSTimestamp
}

type Query @aws_cognito_user_pools {
	GetLargeMessageStorage(tenant: String!, contentEncoding: ContentEncoding, count: Int): [LargeMessageStorage!]!
	GetMessageType(tenant: String!, name: String!): MessageType!
	GetUsersForTenant(tenant: String!): [TenantUser!]
	GetUser: LoginUser!
	GetTenant(tenant: String!): Tenant!
	GetTenantUser(tenant: String!, email: AWSEmail!): TenantUser!
	SearchNodes(
		tenant: String!,
		partialName: Boolean,
		name: String,
		filter: String,
		filterValue: String,
		startKey: AWSJSON,
		limit: Int
	): NodeResult
	@aws_cognito_user_pools @aws_iam
	SearchEdges(
		tenant: String!,
		source: String,
		target: String,
		filter: String,
		filterValue: String,
		startKey: AWSJSON,
		limit: Int
	): EdgeResult
	SearchApps(
		tenant: String!,
		partialName: Boolean,
		name: String,
		filter: String,
		filterValue: String,
		startKey: AWSJSON,
		limit: Int
	): AppResult
	@aws_cognito_user_pools @aws_iam
	ListFunctions(tenant: String!, limit: Int, startKey: AWSJSON): FunctionResult
	ListKeys(tenant: String!, limit: Int, startKey: AWSJSON): KmsKeyResult
	ListMessageTypes(tenant: String!, startKey: String, limit: Int): MessageTypeResult
	ListManagedNodeTypes(tenant: String!, startKey: String, limit: Int): ManagedNodeTypeResult
	ListSnsSubscriptions(tenant: String!): [SnsSubscription]!
	ListApiUsers(tenant: String!, limit: Int, startKey: AWSJSON): ApiUserResult
	ListTenants: [Tenant!]
	Validate(
		tenant: String!,
		validatable: String!,
		code: String!,
		args: AWSJSON,
		kwargs: AWSJSON,
		loggingLevel: LogLevel
	): ValidateResult!
	GetNodeCallableLogs(
		tenant: String!,
		startTime: Int!,
		endTime: Int,
		node: String!,
		limit: Int,
		nextToken: String
	): NodeCallableLogResult!
	GetInstalledIntegration(tenant: String!, name: AvailableIntegrations!): Integration
	ListInstalledIntegrations(tenant: String!): [Integration!]
	GetIntegrationDefinition(tenant: String!, name: AvailableIntegrations): IntegrationDefinition!
	ListAvailableIntegrations(tenant: String!): [AvailableIntegrations]!
}

enum Region {
	us_east_1
	us_east_2
	us_west_1
	us_west_2
	af_south_1
	ap_east_1
	ap_south_1
	ap_northeast_1
	ap_northeast_2
	ap_northeast_3
	ap_southeast_1
	ap_southeast_2
	ca_central_1
	eu_central_1
	eu_west_1
	eu_west_2
	eu_south_1
	eu_west_3
	eu_north_1
	me_south_1
	sa_east_1
	us_gov_east_1
	us_gov_west_1
}

type RouterNode implements NodeInterface @aws_cognito_user_pools {
	tenant: Tenant!
	name: String!
	description: String
	sendEdges: [Edge]
	sendMessageType: MessageType
	receiveEdges: [Edge]
	receiveMessageType: MessageType
	config: AWSJSON
	inlineBitmapper: String
	routeTable: AWSJSON!
	managedBitmapper: BitmapperFunction
	lastModified: LastModified
	requirements: [String!]
}

type SnsSubscription @aws_cognito_user_pools {
	protocol: SnsSubscriptionProtocol!
	endpoint: String!
	arn: String!
	tenant: Tenant!
}

enum SnsSubscriptionProtocol {
	https
	email
	email_json
}

enum SnsSubscriptionStatus {
	PendingConfirmation
	Confirmed
}

type Subscription @aws_cognito_user_pools {
	appNotifications(tenant: String!, app: String!): AppNotification
		@aws_subscribe(mutations: ["NotifyApp"])
	uiNotifications(tenant: String!): UINotification
		@aws_subscribe(mutations: ["NotifyUI"])
}

type Tenant @aws_cognito_user_pools {
	name: String!
	region: String!
	users: [TenantUser!]
	alertSnsTopic: String!
	config: AWSJSON
	integrations: [Integration]
	lastModified: LastModified
}

type TenantUser @aws_cognito_user_pools {
	tenant: Tenant!
	role: UserRole!
	status: UserStatus!
	email: AWSEmail!
	firstName: String!
	lastName: String!
	invitationToken: String
	invitationDate: String
	activeDate: String
	lastModified: LastModified
}

type LoginUser @aws_cognito_user_pools {
	tenantUsers: [TenantUser!]
	email: AWSEmail!
	firstName: String!
	lastName: String!
	activeDate: String
	lastModified: LastModified
}

type TransformerNode implements NodeInterface @aws_cognito_user_pools {
	tenant: Tenant!
	name: String!
	description: String
	sendEdges: [Edge]
	sendMessageType: MessageType
	receiveEdges: [Edge]
	receiveMessageType: MessageType
	config: AWSJSON
	inlineTransformer: String
	managedTransformer: TransformerFunction
	lastModified: LastModified
	sequentialProcessing: Boolean
	requirements: [String!]
}

type UINotification @aws_cognito_user_pools
@aws_iam {
	itemType: ItemType!
	tenant: String!
	operation: DbOperation!
	name: String!
	modifiedBy: String!
}

enum UserRole {
	admin
	owner
	read_only
	user
}

enum UserStatus {
	active
	inactive
	invited
	pending
}

type ValidateResult @aws_cognito_user_pools {
	result: String!
	stdout: String!
}

type XTenantReceivingApp implements AppInterface @aws_cognito_user_pools {
	tenant: Tenant!
	sendingTenant: String!
	sendingApp: String
	name: String!
	description: String
	nodes: [XTenantReceivingNode]
	lastModified: LastModified
}

type XTenantReceivingNode implements NodeInterface @aws_cognito_user_pools {
	tenant: Tenant!
	name: String!
	description: String
	sendEdges: [Edge]
	sendMessageType: MessageType
	app: XTenantReceivingApp!
	lastModified: LastModified
}

type XTenantSendingApp implements AppInterface @aws_cognito_user_pools {
	tenant: Tenant!
	receivingTenant: String!
	receivingApp: String!
	name: String!
	description: String
	nodes: [XTenantSendingNode]
	lastModified: LastModified
}

type XTenantSendingNode implements NodeInterface @aws_cognito_user_pools {
	tenant: Tenant!
	name: String!
	description: String
	receiveEdges: [Edge]
	receiveMessageType: MessageType
	config: AWSJSON
	app: XTenantSendingApp!
	inlineTransformer: String
	managedTransformer: Tran
	lastModified: LastModified
	sequentialProcessing: Boolean
	requirements: [String!]
}
