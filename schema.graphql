union App = ManagedApp | ExternalApp

enum AppAuthType @aws_cognito_user_pools{
	x_account
	cognito
}

input AppInput {
	name: String!
	description: String
}

interface AppInterface @aws_cognito_user_pools{
	tenant: Tenant!
	type: AppType!
	name: String!
	description: String
	nodes: [Node]
	event_id: String
	config: AWSJSON
}

type AppResult @aws_cognito_user_pools{
	items: [App]
	nextToken: String
	scannedCount: Int
}

enum AppType {
	ManagedApp
	ExternalApp
}

type CognitoUser @aws_cognito_user_pools{
	tenant: Tenant!
	name: String!
	role: String!
}

type Edge @aws_cognito_user_pools{
	tenant: Tenant!
	name: String!
	description: String
	source: Node!
	target: Node!
	metadata: AWSJSON
	kms_key: KMSKey!
	queue: AWSURL!
	event_id: String!
}

input EdgeInput {
	name: String!
	description: String
	kms_key: String!
	source: String!
	target: String!
	metadata: AWSJSON
}

type EdgeResult @aws_cognito_user_pools{
	items: [Edge]
	nextToken: String
	scannedCount: Int
}

type ExternalApp implements AppInterface @aws_cognito_user_pools{
	tenant: Tenant!
	type: AppType!
	name: String!
	description: String
	nodes: [Node]
	account: String
	auth_type: String
	config: AWSJSON
	event_id: String
}

type ExternalNode implements NodeInterface @aws_cognito_user_pools{
	tenant: Tenant!
	name: String!
	description: String
	send_edges: [Edge]
	receive_edges: [Edge]
	app: App
	metadata: AWSJSON
	event_id: String
}

type Hl7MLLPInboundNode implements NodeInterface @aws_cognito_user_pools{
	type: NodeTypes!
	tenant: Tenant!
	name: String!
	node_type: String!
	description: String
	port: Int!
	send_edges: [Edge]
	app: App
	metadata: AWSJSON
	event_id: String
}

type Hl7MLLPOutboundNode implements NodeInterface @aws_cognito_user_pools{
	type: NodeTypes!
	tenant: Tenant!
	name: String!
	node_type: String!
	description: String
	remote_host: String!
	remote_port: Int!
	receive_edges: [Edge]
	app: App
	metadata: AWSJSON
	event_id: String
}

type KMSKey @aws_cognito_user_pools{
	tenant: Tenant!
	name: String!
	arn: String!
	description: String
}

input KmsKeyInput {
	name: String!
	description: String
}

type ManagedApp implements AppInterface @aws_cognito_user_pools{
	tenant: Tenant!
	type: AppType!
	name: String!
	description: String
	nodes: [Node]
	iso: String
	config: AWSJSON
	event_id: String
}

type Mutation @aws_cognito_user_pools{
	DeleteNode(tenant: String!, node: String!): Node
	DeleteEdge(tenant: String!, edge: String!): Edge
	DeleteApp(tenant: String!, app: String!): App
	PutTenant(tenant: TenantInput!): Tenant
	PutEdge(tenant: String!, edge: EdgeInput!): Edge
	PutHl7MLLPOutboundNode(tenant: String!, node: NodeInput, remote_port: Int!, remote_host: String!): Hl7MLLPOutboundNode
	PutHl7MLLPInboundNode(tenant: String!, node: NodeInput, port: Int!): Hl7MLLPInboundNode
	PutExternalNode(tenant: String!, node: NodeInput): ExternalNode
	PutExternalApp(tenant: String!, app: AppInput!, auth_type: AppAuthType!, account: String): ExternalApp
	PutManagedApp(tenant: String!, app: AppInput!): ManagedApp
	PutKmsKey(tenant: String!, key: KmsKeyInput!): KMSKey
	AddUserToTenant(tenant: String!, user: UserInput!): User
	StreamNotifications(tenant: String!, data: AWSJSON, function: String!): StreamNotification
	@aws_iam @aws_cognito_user_pools
	ResetAppPassword(tenant: String!, name: String!): App
}

union Node = Hl7MLLPInboundNode | Hl7MLLPOutboundNode | ExternalNode

input NodeInput {
	name: String!
	type: String!
	description: String
	app: String
	metadata: AWSJSON
}

interface NodeInterface @aws_cognito_user_pools{
	name: String!
	description: String
	tenant: Tenant!
	app: App
	metadata: AWSJSON
	event_id: String
}

type NodeResult @aws_cognito_user_pools{
	items: [Node]
	nextToken: String
	scannedCount: Int
}

enum NodeTypes {
	Hl7MLLPInbound
	Hl7MLLPOutbound
	External
}

enum ObjectTypes {
	Node
	App
	Edge
}

type Query @aws_cognito_user_pools{
	GetUsersForTenant(tenant: String!): [UserResult]
	GetUser(email: AWSEmail): [User]
	SearchNodes(
		tenant: String!
		partial_name: Boolean,
		name: String,
		filter: String,
		filter_value: String,
		nextToken: String,
		limit: Int
	): NodeResult
	SearchEdges(
		tenant: String!
		partial_name: Boolean,
		source: String,
		target: String,
		filter: String,
		filter_value: String,
		nextToken: String,
		limit: Int
	): EdgeResult
	SearchApps(
		tenant: String!
		partial_name: Boolean,
		name: String,
		filter: String,
		filter_value: String,
		nextToken: String,
		limit: Int
	): AppResult
	ListKeys: [KMSKey]
}

enum Region {
	us_east_1
	us_east_2
	us_west_1
	us_west_2
	af_south_1
	ap_east_1
	ap_south_1
	ap_northeast_1
	ap_northeast_2
	ap_northeast_3
	ap_southeast_1
	ap_southeast_2
	ca_central_1
	eu_central_1
	eu_west_1
	eu_west_2
	eu_south_1
	eu_west_3
	eu_north_1
	me_south_1
	sa_east_1
	us_gov_east_1
	us_gov_west_1
}

type StreamNotification @aws_iam {
	tenant: String
	message: String
	error: String
	function: String
	event_name: String
	item_type: String
	old_record: AWSJSON
	new_record: AWSJSON
}

type Subscription @aws_cognito_user_pools{
	onStreamNotifications(tenant: String!): StreamNotification
		@aws_subscribe(mutations: ["StreamNotifications"])
		@aws_cognito_user_pools
}

type Tenant @aws_cognito_user_pools{
	name: String!
	default_region: Region!
	billing_info: AWSJSON
}

input TenantInput @aws_cognito_user_pools{
	name: String!
	default_region: Region!
	billing_info: AWSJSON
	event_id: String
}

type User @aws_cognito_user_pools{
	tenant: Tenant!
	email: AWSEmail!
	name: String!
	role: UserRole!
	status: UserStatus!
	invitation_token: String!
	active_date: String
	invitation_date: String
	event_id: String
}

input UserInput {
	first_name: String!
	last_name: String!
	email: String!
	role: UserRole!
}

type UserResult @aws_cognito_user_pools{
	items: [User]
	nextToken: String
	scannedCount: Int
}

enum UserRole {
	admin
	user
}

enum UserStatus {
	active
	invited
	suspended
}
