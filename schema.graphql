union App = ManagedApp | ExternalApp | XTenantReceivingApp | XTenantSendingApp

enum AppAuthType {
	x_account
	cognito
}

input AppInput {
	name: String!
	config: AWSJSON
	description: String
}

interface AppInterface {
	tenant: Tenant!
	name: String!
	description: String
	config: AWSJSON
}

type AppResult @aws_cognito_user_pools {
	items: [App]
	lastEvaluatedKey: AWSJSON
	scannedCount: Int
}

type CognitoUser @aws_cognito_user_pools {
	tenant: Tenant!
	name: String!
	role: String!
}

enum ContentEncoding {
	deflate
	gzip
}

type DicomTcpInboundNode implements NodeInterface @aws_cognito_user_pools {
	tenant: Tenant!
	name: String!
	description: String
	port: Int!
	sendEdges: [Edge]
	sendMessageType: MessageType!
	app: ManagedApp!
	metadata: AWSJSON
}

type DicomTcpOutboundNode implements NodeInterface @aws_cognito_user_pools {
	tenant: Tenant!
	name: String!
	description: String
	remoteHost: String!
	remotePort: Int!
	receiveEdges: [Edge]
	receiveMessageType: MessageType!
	app: ManagedApp!
	metadata: AWSJSON
}

type Edge @aws_cognito_user_pools {
	tenant: Tenant!
	description: String
	source: Node!
	target: Node!
	messageType: String!
	metadata: AWSJSON
	kmsKey: KmsKey!
	queue: AWSURL!
}

input EdgeInput {
	description: String
	kmsKey: String
	source: String!
	target: String!
	metadata: AWSJSON
}

type EdgeResult @aws_cognito_user_pools {
	items: [Edge]
	lastEvaluatedKey: AWSJSON
	scannedCount: Int
}

type ExternalApp implements AppInterface @aws_cognito_user_pools {
	tenant: Tenant!
	name: String!
	description: String
	nodes: [ExternalNode]
	account: String
	authType: AppAuthType!
	config: AWSJSON
}

type ExternalNode implements NodeInterface @aws_cognito_user_pools {
	tenant: Tenant!
	name: String!
	description: String
	sendEdges: [Edge]
	sendMessageType: MessageType!
	receiveEdges: [Edge]
	receiveMessageType: MessageType!
	app: ExternalApp!
	metadata: AWSJSON
}

type Hl7MllpInboundNode implements NodeInterface @aws_cognito_user_pools {
	tenant: Tenant!
	name: String!
	description: String
	port: Int!
	sendEdges: [Edge]
	sendMessageType: MessageType!
	app: ManagedApp!
	metadata: AWSJSON
}

type Hl7MllpOutboundNode implements NodeInterface @aws_cognito_user_pools {
	tenant: Tenant!
	name: String!
	description: String
	remoteHost: String!
	remotePort: Int!
	receiveEdges: [Edge]
	receiveMessageType: MessageType!
	app: ManagedApp!
	metadata: AWSJSON
}

type KmsKey @aws_cognito_user_pools {
	tenant: Tenant!
	name: String!
	description: String
	arn: String!
}

input KmsKeyInput {
	name: String!
	description: String
}

type KmsKeyResult  @aws_cognito_user_pools {
	items: [KmsKey]
	lastEvaluatedKey: AWSJSON
	scannedCount: Int
}

type LargeMessageStorage  @aws_cognito_user_pools {
	presignedPost: PresignedPost!
	presignedGet: AWSURL!
}

type ManagedApp implements AppInterface @aws_cognito_user_pools {
	tenant: Tenant!
	name: String!
	description: String
	nodes: [ManagedNode]
	iso: String!
	config: AWSJSON
}

union ManagedNode = DicomTcpInboundNode | DicomTcpOutboundNode | Hl7MllpInboundNode | Hl7MllpOutboundNode

type MessageType @aws_cognito_user_pools{
	tenant: Tenant!
	name: String!
	auditor: String!
	transformerTemplate: String!
	bitmapperTemplate: String!
	requirements: [String!]!
	system: Boolean!
}

input MessageTypeInput {
	name: String!
	auditor: String!
	transformerTemplate: String!
	bitmapperTemplate: String!
	requirements: [String!]!
}

type MessageTypeResult @aws_cognito_user_pools{
	items: [MessageType]
	lastEvaluatedKey: AWSJSON
	scannedCount: Int
}

type Mutation @aws_cognito_user_pools {
	AppNotification(tenant: String!, oldItem: AWSJSON, newItem: AWSJSON): Notification!
	DeleteTenant(tenant:String!): Tenant
	DeleteNode(tenant: String!, node: String!): Node
	DeleteEdge(tenant: String!, edge: String!): Edge
	DeleteApp(tenant: String!, app: String!): App
	DeleteMessageType(tenant: String!, name: String!): App
	EdgeNotification(tenant: String!, oldItem: AWSJSON, newItem: AWSJSON): Notification!
	NodeNotification(tenant: String!, oldItem: AWSJSON, newItem: AWSJSON): Notification!
	MessageTypeNotification(tenant: String!, oldItem: AWSJSON, newItem: AWSJSON): Notification!
	PutDicomTcpInboundNode(
		tenant: String!,
		app: String,
		node: NodeInput!,
		port: Int!,
	): DicomTcpInboundNode!
	PutDicomTcpOutboundNode(
		tenant: String!,
		app: String,
		node: NodeInput!,
		remoteHost: String!,
		remotePort: Int!
	): DicomTcpOutboundNode!
	PutEdge(tenant: String!, edge: EdgeInput!): Edge!
	MoveEdge(tenant: String!, source: String!, target: String!, oldSource: String!, oldTarget: String!): Edge!
	PutExternalApp(
		tenant: String!,
		app: AppInput!,
		authType: AppAuthType!,
		account: String
	): ExternalApp!
	PutExternalNode(
		tenant: String!,
		app: String,
		node: NodeInput!,
		receiveMessageType: String!,
		sendMessageType: String!
	): ExternalNode!
	PutHl7MllpInboundNode(
		tenant: String!,
		app: String!,
		node: NodeInput!,
		port: Int!
	): Hl7MllpInboundNode!
	PutHl7MllpOutboundNode(
		tenant: String!,
		app: String!,
		node: NodeInput!,
		remoteHost: String!,
		remotePort: Int!
	): Hl7MllpOutboundNode!
	PutKmsKey(tenant: String!, key: KmsKeyInput!): KmsKey!
	PutManagedApp(tenant: String!, app: AppInput!): ManagedApp!
	PutMessageType(tenant: String!, type: MessageTypeInput!): MessageType!
	PutRouterNode(
		tenant: String!,
		node: NodeInput!,
		messageType: String!,
		bitmapper: String!,
		routeTable: AWSJSON!
	): RouterNode!
	PutTenant(name: String!, region: Region!, billingInfo: AWSJSON): Tenant!
	PutTransNode(
		tenant: String!,
		node: NodeInput!,
		receiveMessageType: String!,
		sendMessageType: String,
		transformer: String
	): TransNode!
	PutXTenantReceivingApp(tenant: String!, app: AppInput!, sendingTenant: String!): XTenantReceivingApp!
	PutXTenantSendingApp(
		tenant: String!,
		app: AppInput!,
		receivingTenant: String!,
		receivingApp: String!
	): XTenantSendingApp!
	PutXTenantSendingNode(
		tenant: String!,
		app: String,
		node: NodeInput!,
		receiveMessageType: String!,
		sendMessageType: String,
		transformer: String
	): XTenantSendingNode!
	AddUserToTenant(tenant: String!, user: UserInput!): User!
		@aws_iam
@aws_cognito_user_pools
	ResetAppPassword(tenant: String!, name: String!): App!
}

union Node = DicomTcpInboundNode | DicomTcpOutboundNode | ExternalNode | Hl7MllpInboundNode | Hl7MllpOutboundNode | RouterNode | TransNode | XTenantReceivingNode | XTenantSendingNode

input NodeInput {
	name: String!
	description: String
	metadata: AWSJSON
}

interface NodeInterface {
	name: String!
	description: String
	tenant: Tenant!
	metadata: AWSJSON
}

type NodeResult @aws_cognito_user_pools {
	items: [Node]
	lastEvaluatedKey: AWSJSON
	scannedCount: Int
}

type Notification @aws_cognito_user_pools{
	itemType: String!
	oldItem: AWSJSON!
	newItem: AWSJSON!
	tenant: String!
	modifiedBy: String!
	operation: String!
	message: AWSJSON
	error: AWSJSON
}

enum Operations {
	MODIFY
	DELETE
	INSERT
}

type PresignedPost @aws_cognito_user_pools{
	url: AWSURL
	fields: AWSJSON
	expiration: AWSTimestamp
}

type Query @aws_cognito_user_pools {
	GetLargeMessageStorage(tenant: String!, contentEncoding: ContentEncoding, count: Int): [LargeMessageStorage!]!
	GetMessageType(tenant: String!, name: String!): MessageType!
	GetUsersForTenant(tenant: String!): [UserResult]
	GetUser: User
	GetTenantUser(email: AWSEmail!): User
	SearchNodes(
		tenant: String!,
		partialName: Boolean,
		name: String,
		filter: String,
		filterValue: String,
		startKey: AWSJSON,
		limit: Int
	): NodeResult
	@aws_cognito_user_pools @aws_iam
	SearchEdges(
		tenant: String!,
		source: String,
		target: String,
		filter: String,
		filterValue: String,
		startKey: AWSJSON,
		limit: Int
	): EdgeResult
	SearchApps(
		tenant: String!,
		partialName: Boolean,
		name: String,
		filter: String,
		filterValue: String,
		startKey: AWSJSON,
		limit: Int
	): AppResult
	@aws_cognito_user_pools @aws_iam
	ListKeys(tenant: String!, limit: Int, startKey: AWSJSON): KmsKeyResult
	ListMessageTypes(tenant: String!, startKey: String, limit: Int): MessageTypeResult
	ValidateFunction(
		tenant: String!,
		messageType: String!,
		function: String!,
		args: AWSJSON,
		kwargs: AWSJSON
	): ValidateFunctionResult
}

enum Region {
	us_east_1
	us_east_2
	us_west_1
	us_west_2
	af_south_1
	ap_east_1
	ap_south_1
	ap_northeast_1
	ap_northeast_2
	ap_northeast_3
	ap_southeast_1
	ap_southeast_2
	ca_central_1
	eu_central_1
	eu_west_1
	eu_west_2
	eu_south_1
	eu_west_3
	eu_north_1
	me_south_1
	sa_east_1
	us_gov_east_1
	us_gov_west_1
}

type RouterNode implements NodeInterface @aws_cognito_user_pools{
	tenant: Tenant!
	name: String!
	description: String
	sendEdges: [Edge]
	sendMessageType: MessageType!
	receiveEdges: [Edge]
	receiveMessageType: MessageType!
	metadata: AWSJSON
	bitmapper: String!
	routeTable: AWSJSON!
}

type Subscription @aws_cognito_user_pools {
	appUpdated(tenant: String!, name: String): Notification
		@aws_subscribe(mutations: ["AppNotification"])
	nodeUpdated(tenant: String!, name: String): Notification
		@aws_subscribe(mutations: ["NodeNotification"])
	edgeUpdated(tenant: String!, name: String): Notification
		@aws_subscribe(mutations: ["EdgeNotification"])
	messageTypeUpdated(tenant: String!, name: String): Notification
		@aws_subscribe(mutations: ["MessageTypeNotification"])
}

type Tenant @aws_cognito_user_pools {
	name: String!
	region: String!
	billingInfo: AWSJSON
}

type TransNode implements NodeInterface  @aws_cognito_user_pools{
	tenant: Tenant!
	name: String!
	description: String
	sendEdges: [Edge]
	sendMessageType: MessageType!
	receiveEdges: [Edge]
	receiveMessageType: MessageType!
	metadata: AWSJSON
	transformer: String
}

type User @aws_cognito_user_pools {
	tenant: Tenant!
	email: AWSEmail!
	name: String!
	role: UserRole!
	status: UserStatus!
	invitationToken: String!
	activeDate: String
	invitationDate: String
}

input UserInput {
	firstName: String!
	lastName: String!
	email: String!
	role: UserRole!
}

type UserResult @aws_cognito_user_pools {
	items: [User]
	lastEvaluatedKey: String
	scannedCount: Int
}

enum UserRole {
	admin
	user
}

enum UserStatus {
	active
	invited
	suspended
}

type ValidateFunctionResult  @aws_cognito_user_pools{
	result: String!
	stdout: String!
}

type XTenantReceivingApp implements AppInterface @aws_cognito_user_pools {
	tenant: Tenant!
	sendingTenant: String!
	sendingApp: String
	name: String!
	description: String
	nodes: [XTenantReceivingNode]
	config: AWSJSON
}

type XTenantReceivingNode implements NodeInterface @aws_cognito_user_pools {
	tenant: Tenant!
	name: String!
	description: String
	sendEdges: [Edge]
	sendMessageType: MessageType!
	metadata: AWSJSON
	app: XTenantReceivingApp!
}

type XTenantSendingApp implements AppInterface @aws_cognito_user_pools {
	tenant: Tenant!
	receivingTenant: String!
	receivingApp: String!
	name: String!
	description: String
	nodes: [XTenantSendingNode]
	config: AWSJSON
}

type XTenantSendingNode implements NodeInterface @aws_cognito_user_pools {
	tenant: Tenant!
	name: String!
	description: String
	receiveEdges: [Edge]
	receiveMessageType: MessageType!
	metadata: AWSJSON
	app: XTenantSendingApp!
	transformer: String
}
