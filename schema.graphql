type ApiUser @aws_cognito_user_pools {
	config: AWSJSON!
	created: AtBy!
	description: String
	lastModified: AtBy!
	role: ApiUserRole!
	tenant: Tenant!
	username: String!

	Delete: Boolean!
	Update(description: String, role: ApiUserRole): ApiUser!
}

type ApiUserResult @aws_cognito_user_pools {
	items: [ApiUser]
	lastEvaluatedKey: AWSJSON
	scannedCount: Int
}

enum ApiUserRole {
	admin
	read_only
	user
}

interface App {
	created: AtBy!
	description: String
	lastModified: AtBy!
	name: String!
	tenant: Tenant!

	Delete(drainEdges: Boolean): Boolean!
}

type AppResult @aws_cognito_user_pools {
	items: [App]
	lastEvaluatedKey: AWSJSON
	scannedCount: Int
}

type AtBy @aws_cognito_user_pools {
	at: AWSDateTime
	by: String
}

enum AvailableIntegrations {
	alert_to_clickup_task
}

type BitmapperFunction implements Function @aws_cognito_user_pool {
	argumentMessageType: MessageType!
	code: String!
	created: AtBy!
	description: String!
	lastModified: AtBy!
	name: String!
	requirements: [String!]
	system: Boolean!
	tenant: Tenant

	Delete: Boolean!
	Update(code: String, description: String, requirements: [String!]): BitmapperFunction!
	Validate(message: String!, code: String, loggingLevel: LogLevel): ValidateResult!
}

enum ContentEncoding {
	gzip
	deflate
}

type CrossAccountApp implements App @aws_cognito_user_pools {
	account: String!
	config: AWSJSON
	created: AtBy!
	description: String
	lastModified: AtBy!
	name: String!
	nodes: [ExternalNode]
	tenant: Tenant!

	Delete(drainEdges: Boolean): Boolean!
	ResetPassword: CrossAccountApp!
	Update(config: AWSJSON, description: String): CrossAccountApp!
}

type DockerConfig @aws_cognito_user_pools {
	imageUrl: String!
	password: String
	username: String
}

input DockerConfigInput {
	imageUrl: String!
	password: String
	username: String
}

type Edge @aws_cognito_user_pools {
	created: AtBy!
	description: String
	kmsKey: KmsKey!
	lastModified: AtBy!
	messageType: MessageType!
	queue: AWSURL!
	source: Node!
	target: Node!
	tenant: Tenant!

	Delete(drain: Boolean): Boolean!
	Move(source: String!, target: String): Edge!
	Purge: Boolean!
	Update(description: String): Edge!
}

type EdgeResult @aws_cognito_user_pools {
	items: [Edge]
	lastEvaluatedKey: AWSJSON
	scannedCount: Int
}

type ExternalApp implements App @aws_cognito_user_pools {
	created: AtBy!
	config: AWSJSON
	description: String
	lastModified: AtBy!
	name: String!
	nodes: [ExternalNode]
	tenant: Tenant!

	Delete(drainEdges: Boolean): Boolean!
	ResetPassword: ExternalApp!
	Update(config: AWSJSON, description: String): ExternalApp!
}

type ExternalNode implements Node @aws_cognito_user_pools {
	app: ExternalApp!
	config: AWSJSON
	created: AtBy!
	description: String
	lastModified: AtBy!
	name: String!
	receiveEdges: [Edge]
	receiveMessageType: MessageType
	sendEdges: [Edge]
	sendMessageType: MessageType
	tenant: Tenant!

	Delete(drainEdges: Boolean): Boolean!
	Update(description: String): ExternalNode!
}

interface Function {
	argumentMessageType: MessageType!
	code: String!
	created: AtBy!
	description: String!
	name: String!
	lastModified: AtBy!
	requirements: [String!]
	system: Boolean!
	tenant: Tenant

	Delete: Boolean!
	Validate(message: String!, code: String, loggingLevel: LogLevel): ValidateResult!
}

type FunctionResult @aws_cognito_user_pools {
	items: [Function]
	lastEvaluatedKey: AWSJSON
	scannedCount: Int
}

type Healthcheck @aws_cognito_user_pools {
	interval: String!
	retries: Int!
	startPeriod: String!
	test: String!
	timeout: String!
}

input HealthcheckInput {
	interval: String!
	retries: Int!
	startPeriod: String!
	test: String!
	timeout: String!
}

type HostMount @aws_cognito_user_pools {
	containerPath: String!
	description: String!
	hostPath: String!
}

input HostMountInput {
	containerPath: String!
	description: String
	hostPath: String!
}

type HostMountRequirement @aws_cognito_user_pools {
	containerPath: String!
	description: String!
}

input HostMountRequirementInput {
	containerPath: String!
	description: String!
}

type Integration @aws_cognito_user_pools @aws_iam {
	config: AWSJSON!
	description: String!
	enabled: Boolean!
	name: AvailableIntegrations!
}

type IntegrationDefinition @aws_cognito_user_pools @aws_iam {
	configTemplate: AWSJSON!
	description: String!
	form: AWSJSON
	icon: AWSURL
	name: AvailableIntegrations!
}

type LoginUser @aws_cognito_user_pools {
	activeDate: String
	created: AtBy!
	email: AWSEmail!
	firstName: String!
	lastModified: AtBy!
	lastName: String!
	tenantUsers: [TenantUser!]
}

type KmsKey @aws_cognito_user_pools {
	arn: String!
	created: AtBy!
	description: String
	lastModified: AtBy!
	name: String!
	tenant: Tenant!

	Delete: Boolean!
	Update(description: String): KmsKey!
}

type KmsKeyResult @aws_cognito_user_pools {
	items: [KmsKey]
	lastEvaluatedKey: AWSJSON
	scannedCount: Int
}

type LargeMessageStorage @aws_cognito_user_pools {
	presignedGet: AWSURL!
	presignedPost: PresignedPost!
}

type LogEvent {
	timestamp: AWSDateTime!
	message: String!
	ingestionTime: AWSDateTime!
}

type LogEventResults {
	items: [LogEvent]!
	nextToken: String
}

enum LogLevel {
	DEBUG
	ERROR
	INFO
	WARNING
}

type ManagedApp implements App @aws_cognito_user_pools {
	config: AWSJSON
	created: AtBy!
	description: String
	managedInstances: [ManagedInstance]
	iso: String!
	lastModified: AtBy!
	name: String!
	nodes: [ManagedNode]
	tenant: Tenant!

	Delete(drainEdges: Boolean): Boolean!
	DeregisterManagedInstance(instanceId: String!): Boolean!
	ResetPassword: ManagedApp!
	Update(description: String): ManagedApp!
}

type ManagedInstance @aws_cognito_user_pools {
	activationId: String!
	hostname: String!
	instanceId: String!
	ipAddress: AWSIPAddress!
	lastPingDateTime: AWSDateTime!
	pingStatus: PingStatus!
	registrationDate: AWSDateTime!
}

type ManagedNode implements Node @aws_cognito_user_pools {
	app: ManagedApp!
	config: AWSJSON
	created: AtBy!
	description: String
	hostMounts: [HostMount!]
	lastModified: AtBy!
	managedNodeType: ManagedNodeType!
	name: String!
	portMappings: [PortMapping!]
	receiveEdges: [Edge]
	receiveMessageType: MessageType
	sendEdges: [Edge]
	sendMessageType: MessageType
	tenant: Tenant!

	Delete(drainEdges: Boolean): Boolean!
	ListLogEvents(endDateTime: AWSDateTime, filterPattern: String, limit: Int, nextToken: String, startDateTime: AWSDateTime): LogEventResults!
	Update(config: AWSJSON, description: String, hostMounts: [HostMount!], portMappings: [PortMapping!]): ManagedNode!
}

type ManagedNodeType @aws_cognito_user_pools {
	configTemplate: AWSJSON
	created: AtBy!
	description: String
	dockerConfig: DockerConfig!
	healthcheck: Healthcheck
	hostMountRequirements: [HostMountRequirement!]
	lastModified: AtBy!
	name: String!
	portMappingRequirements: [PortMappingRequirement!]
	receiveMessageType: MessageType
	sendMessageType: MessageType
	system: Boolean!
	tenant: Tenant
	volumes: [String!]

	Delete: Boolean!
	Update(description: String!): ManagedNodeType!
}

type ManagedNodeTypeResult @aws_cognito_user_pools {
	items: [ManagedNodeType]
	lastEvaluatedKey: AWSJSON
	scannedCount: Int
}

type MessageType @aws_cognito_user_pools {
	auditor: String!
	bitmapperTemplate: String!
	created: AtBy!
	description: String,
	lastModified: AtBy!
	name: String!
	requirements: [String!]
	system: Boolean!
	tenant: Tenant
	transformerTemplate: String!
	
	Delete: Boolean!
	Update(auditor: String, bitmapperTemplate: String, description: String, requirements: [String!], transformerTemplate: String): MessageType!
	Validate(message: String!, code: String, loggingLevel: LogLevel): ValidateResult!
}

type MessageTypeResult @aws_cognito_user_pools {
	items: [MessageType]
	lastEvaluatedKey: AWSJSON
	scannedCount: Int
}

type Mutation @aws_cognito_user_pools {
	CreateApiUser(tenant: String!, role: ApiUserRole!, description: String): ApiUser!
	CreateBitmapperFunction(
		tenant: String!,
		name: String!,
		code: String!,
		description: String!,
		type: FunctionType!,
		argumentMessageType: String!,
		requirements: [String!]
	): BitmapperFunction!
	CreateCrossAccountApp(
		tenant: String!,
		name: String!,
		description: String,
		account: String!
	): ExternalApp!
	CreateEdge(
		tenant: String!, 
		source: String!, 
		target: String!, 
		kmsKey: String, 
		description: String
	): Edge!
	CreateExternalApp(
		tenant: String!,
		name: String!,
		description: String,
	): ExternalApp!
	CreateExternalNode(
		tenant: String!,
		app: String!,
		name: String!,
		receiveMessageType: String,
		sendMessageType: String
		description: String,
		config: AWSJSON,
	): ExternalNode!
	CreateKmsKey(tenant: String!, 	name: String!, description: String): KmsKey!
	CreateManagedApp(tenant: String!, name: String!, description: String): ManagedApp!
	CreateManagedNode(
		tenant: String!,
		app: String!,
		name: String!,
		managedNodeType: String!,
		description: String,
		config: AWSJSON,
		portMappings: [PortMappingInput!],
		hostMounts: [HostMountInput!]
	): ManagedNode!
	CreateManagedNodeType(
		tenant: String!, 
		name: String!,
		description: String,
		dockerConfig: DockerConfigInput!,
		configTemplate: AWSJSON,
		hostMountRequirements: [HostMountRequirementInput!],
		portMappingRequirements: [PortMappingRequirementInput!],
		volumes: [String!],
		sendMessageType: String,
		receiveMessageType: String,
		healthcheck: HealthcheckInput
	): ManagedNodeType!
	CreateMessageType(
		tenant: String!, 
		name: String!,
		auditor: String!,
		transformerTemplate: String!,
		bitmapperTemplate: String!,
		requirements: [String!]
	): MessageType!
	CreateNotification(old: AWSJSON, new: AWSJSON): Notification!
	@aws_iam
	CreateRouterNode(
		tenant: String!,
		name: String!,
		receiveMessageType: String!,
		inlineBitmapper: String,
		routeTable: AWSJSON!,
		managedBitmapper: String
		description: String,
		config: AWSJSON,
		requirements: [String!]
	): RouterNode!
	CreateTenant(name: String!, region: Region!, config: AWJSON): Tenant!
	CreateTransformerFunction(
		tenant: String!,
		name: String!,
		code: String!,
		description: String!,
		type: FunctionType!,
		argumentMessageType: String!,
		resultMessageType: String!,
		requirements: [String!]
	): TransformerFunction!
	CreateTransformerNode(
		tenant: String!,
		name: String!,
		receiveMessageType: String!,
		description: String,
		config: AWSJSON,
		sendMessageType: String,
		inlineTransformer: String,
		managedTransformer: String,
		sequentialProcessing: Boolean,
		requirements: [String!]
	): TransformerNode!
	CreateXTenantReceivingApp(
		tenant: String!, 
		name: String!, 
		sendingTenant: String!, 
		description: String
	): XTenantReceivingApp!
	CreateXTenantSendingApp(
		tenant: String!,
		name: String!,
		description: String,
		receivingTenant: String!,
		receivingApp: String!
	): XTenantSendingApp!
	CreateXTenantSendingNode(
		tenant: String!,
		app: String!,
		name: String!,
		receiveMessageType: String!,
		description: String,
		config: AWSJSON,
		sendMessageType: String,
		inlineTransformer: String,
		managedTransformer: String,
		sequentialProcessing: Boolean,
		requirements: [String!]
	): XTenantSendingNode!


	SubscribeToSns(tenant: String!, endpoint: String!, protocol: SnsSubscriptionProtocol!): SnsSubscription!
	UnsubscribeFromSns(tenant: String, arn: String!): SnsSubscription!
	ConfirmSnsSubscription(tenant: String!, token: String!, endpoint: String!): SnsSubscription!
	PutIntegration(config: AWSJSON!, name: AvailableIntegrations!, enabled: Boolean!): Integration!
	RemoveIntegration(tenant: String!, name: AvailableIntegrations!): Boolean!
}

interface Node {
	created: AtBy!
	description: String
	lastModified: AtBy!
	name: String!
	tenant: Tenant!

	Delete(drainEdges: Boolean): Boolean!
}

type NodeResult @aws_cognito_user_pools {
	items: [Node]
	lastEvaluatedKey: AWSJSON
	scannedCount: Int
}

union Notifiable = BitmapperFunction | CrossAccountApp | Edge |  ExternalApp | ExternalNode | KmsKey | ManagedApp | ManagedNode | ManagedNodeType | MessageType | RouterNode | Tenant | TransformerFunction | TransformerNode | XTenantReceivingApp | XTenantReceivingNode | XTenantSendingApp | XTenantSendingNode

type Notification @aws_cognito_user_pools {
	app: String,
	old: Notifiable,
	new: Notifiable
	tenant: String!,
}

enum PingStatus {
	ConnectionLost
	Inactive
	Online
}

type PortMapping @aws_cognito_user_pools {
	containerPort: Int!
	description: String!
	hostPort: Int!
}

input PortMappingInput {
	containerPort: Int!
	hostPort: Int!
}

type PortMappingRequirement @aws_cognito_user_pools {
	containerPort: Int!
	description: String!
}

input PortMappingRequirementInput {
	containerPort: Int!
	description: String!
}

type PresignedPost @aws_cognito_user_pools {
	expiration: AWSTimestamp!
	fields: AWSJSON!
	url: AWSURL!
}

type Query @aws_cognito_user_pools {
	GetApiUser(tenant: String!, username: String!): ApiUser
	GetApp(name: String!, tenant: String!): App
	GetEdge(source: String!, target: String!, tenant: String!): Edge
	GetFunction(name: String!, tenant: String): Function
	GetKmsKey(name: String!, tenant: String!): KmsKey
	GetLargeMessageStorage(tenant: String!, contentEncoding: ContentEncoding, count: Int): [LargeMessageStorage!]!
	GetManagedNodeType(name: String!, tenant: String): ManagedNodeType
	GetMessageType(name: String!, tenant: String): MessageType
	GetNode(name: String!, tenant: String!): Node
	GetTenant(tenant: String!): Tenant!
	GetTenantUser(tenant: String!, email: AWSEmail!): TenantUser!
	GetUser: LoginUser!

	ListApiUsers(tenant: String!, limit: Int, startKey: AWSJSON): ApiUserResult
	ListApps(tenant: String!, limit: Int, nameContains: String, startKey: AWSJSON): AppResult
	ListFunctions(limit: Int, startKey: AWSJSON, tenant: String): FunctionResult
	ListKeys(tenant: String!, limit: Int, startKey: AWSJSON): KmsKeyResult
	ListNodes(tenant: String!, limit: Int, nameContains: String, startKey: AWSJSON): NodeResult
	ListManagedNodeTypes(limit: Int, startKey: String, tenant: String): ManagedNodeTypeResult
	ListMessageTypes(limit: Int, startKey: String, tenant: String): MessageTypeResult
	ListTenants(limit: Int, startKey: String): TenantResult
	ListTenantUsers(tenant: String!, limit: Int, startKey: AWSJSON): TenantUserResult


	ListSnsSubscriptions(tenant: String!): [SnsSubscription]!
	GetInstalledIntegration(tenant: String!, name: AvailableIntegrations!): Integration
	ListInstalledIntegrations(tenant: String!): [Integration!]
	GetIntegrationDefinition(tenant: String!, name: AvailableIntegrations): IntegrationDefinition!
	ListAvailableIntegrations(tenant: String!): [AvailableIntegrations]!
}

enum Region {
	af_south_1
	ap_east_1
	ap_northeast_1
	ap_northeast_2
	ap_northeast_3
	ap_south_1
	ap_southeast_1
	ap_southeast_2
	ca_central_1
	eu_central_1
	eu_north_1
	eu_south_1
	eu_west_1
	eu_west_2
	eu_west_3
	me_south_1
	sa_east_1
	us_east_1
	us_east_2
	us_west_1
	us_west_2
	us_gov_east_1
	us_gov_west_1
}

type RouterNode implements Node @aws_cognito_user_pools {
	config: AWSJSON
	created: AtBy!
	description: String
	inlineBitmapper: String
	lastModified: AtBy!
	managedBitmapper: BitmapperFunction
	name: String!
	receiveEdges: [Edge]
	receiveMessageType: MessageType
	requirements: [String!]
	routeTable: AWSJSON!
	sendEdges: [Edge]
	sendMessageType: MessageType
	tenant: Tenant!

	Delete(drainEdges: Boolean): Boolean!
	ListLogEvents(endDateTime: AWSDateTime, filterPattern: String, limit: Int, nextToken: String, startDateTime: AWSDateTime): LogEventResults!
	Update(config: AWSJSON, description: String, inlineBitmapper: String, managedBitmapper: String, requirements: [String!], routeTable: AWSJSON): RouterNode!
	Validate(message: String!, code: String, loggingLevel: LogLevel): ValidateResult!
}

type SnsSubscription @aws_cognito_user_pools {
	arn: String!
	endpoint: String!
	protocol: SnsSubscriptionProtocol!
	tenant: Tenant!
}

enum SnsSubscriptionProtocol {
	email
	email_json
	https
}

enum SnsSubscriptionStatus {
	Confirmed
	PendingConfirmation
}

type Subscription @aws_cognito_user_pools {
	onNotification(tenant: String!, app: String): Notification
	@aws_subscribe(mutations: ["createNotification"])
}

type Tenant @aws_cognito_user_pools {
	alertSnsTopic: String!
	config: AWSJSON
	created: AtBy!
	integrations: [Integration]
	lastModified: AtBy!
	name: String!
	region: String!
	users: [TenantUser!]

	AddUser(email: String!, role: UserRole!): TenantUser!
	@aws_iam @aws_cognito_user_pools
	Delete: Boolean!
	Update(config: AWSJSON): Tenant!
}

type TenantResult @aws_cognito_user_pools {
	items: [Tenant]
	lastEvaluatedKey: AWSJSON
	scannedCount: Int
}

type TenantUser @aws_cognito_user_pools {
	activeDate: String
	created: AtBy!
	email: AWSEmail!
	firstName: String
	invitationDate: String
	invitationToken: String
	lastModified: AtBy!
	lastName: String
	role: UserRole!
	status: UserStatus!
	tenant: Tenant!

	Delete: Boolean!
	Update(role: UserRole, status: UserStatus): TenantUser!
}

type TenantUserResult @aws_cognito_user_pools {
	items: [TenantUser]
	lastEvaluatedKey: AWSJSON
	scannedCount: Int
}

type TransformerFunction implements Function @aws_cognito_user_pool {
	argumentMessageType: MessageType!
	code: String!
	created: AtBy!
	description: String!
	lastModified: AtBy!
	name: String!
	requirements: [String!]
	resultMessageType: MessageType!
	system: Boolean!
	tenant: Tenant

	Delete: Boolean!
	Update(code: String, description: String, requirements: [String!]): TransformerFunction!
	Validate(message: String!, code: String, loggingLevel: LogLevel): ValidateResult!
}

type TransformerNode implements Node @aws_cognito_user_pools {
	config: AWSJSON
	created: AtBy!
	description: String
	lastModified: AtBy!
	inlineTransformer: String
	inlineTransformer: TransformerFunction
	name: String!
	receiveEdges: [Edge]
	receiveMessageType: MessageType
	requirements: [String!]
	sendEdges: [Edge]
	sendMessageType: MessageType
	sequentialProcessing: Boolean
	tenant: Tenant!

	Delete(drainEdges: Boolean): Boolean!
	ListLogEvents(endDateTime: AWSDateTime, filterPattern: String, limit: Int, nextToken: String, startDateTime: AWSDateTime): LogEventResults!
	Update(config: AWSJSON, description: String, inlineTransformer: String, inlineTransformer: String, requirements: [String!], sequentialProcessing: Boolean): TransformerNode!
	Validate(message: String!, code: String, loggingLevel: LogLevel): ValidateResult!
}

enum UserRole {
	admin
	owner
	read_only
	user
}

enum UserStatus {
	active
	inactive
	invited
	pending
}

type ValidateResult @aws_cognito_user_pools {
	result: String!
	stdout: String!
}

type XTenantReceivingApp implements App @aws_cognito_user_pools {
	created: AtBy!
	description: String
	lastModified: AtBy!
	name: String!
	nodes: [XTenantReceivingNode]
	sendingApp: String
	sendingTenant: String!
	tenant: Tenant!

	Delete(drainEdges: Boolean): Boolean!
	Update(description: String): XTenantReceivingApp!
}

type XTenantReceivingNode implements Node @aws_cognito_user_pools {
	app: XTenantReceivingApp!
	created: AtBy!
	description: String
	lastModified: AtBy!
	name: String!
	sendEdges: [Edge]
	sendMessageType: MessageType
	tenant: Tenant!

	Delete(drainEdges: Boolean): Boolean!
	Update(description: String): XTenantReceivingNode!
}

type XTenantSendingApp implements App @aws_cognito_user_pools {
	created: AtBy!
	description: String
	lastModified: AtBy!
	name: String!
	nodes: [XTenantSendingNode]
	receivingApp: String!
	receivingTenant: String!
	tenant: Tenant!
	
	Delete(drainEdges: Boolean): Boolean!
	Update(description: String): XTenantSendingApp!
}

type XTenantSendingNode implements Node @aws_cognito_user_pools {
	app: XTenantSendingApp!
	config: AWSJSON
	created: AtBy!
	description: String
	inlineTransformer: String
	lastModified: AtBy!
	managedTransformer: TransformerFunction
	name: String!
	receiveEdges: [Edge]
	receiveMessageType: MessageType
	requirements: [String!]
	sequentialProcessing: Boolean
	tenant: Tenant!

	Delete(drainEdges: Boolean): Boolean!
	ListLogEvents(endDateTime: AWSDateTime, filterPattern: String, limit: Int, nextToken: String, startDateTime: AWSDateTime): LogEventResults!
	Update(config: AWSJSON, description: String, inlineTransformer: String, inlineTransformer: String, requirements: [String!], sequentialProcessing: Boolean): XTenantSendingNode!
	Validate(message: String!, code: String, loggingLevel: LogLevel): ValidateResult!
}
