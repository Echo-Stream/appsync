name: Build Appsync Resolvers

on:
  push:
    branches:
    - master
    - develop
    - 'release/**'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Deps
      run: pip3.8 install appsync-schema-uploader appsync-resolver-uploader
    - name: Set env vars
      run: |
        echo "::set-env name=AWS_DEFAULT_REGION::us-east-1"
        if [ "${GITHUB_REF}" = "refs/heads/develop" ]; then
          echo "::set-env name=AWS_ACCESS_KEY_ID::${{ secrets.AWS_ACCESS_KEY_ID_DEV }}"
          echo "::set-env name=AWS_SECRET_ACCESS_KEY::${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}"
          echo "::set-env name=API_ID::${{ secrets.APPSYNC_API_ID_DEV }}"
        elif [ "${GITHUB_REF}" = "refs/heads/master" ]; then
          echo "::set-env name=AWS_ACCESS_KEY_ID::${{ secrets.AWS_ACCESS_KEY_ID_PROD }}"
          echo "::set-env name=AWS_SECRET_ACCESS_KEY::${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}"
          echo "::set-env name=API_ID::${{ secrets.APPSYNC_API_ID_DEV }}"
        elif [[ "${GITHUB_REF}" =~ ^refs/heads/release/([0-9]+\.)+[0-9]$ ]]; then
          echo "::set-env name=AWS_ACCESS_KEY_ID::${{ secrets.AWS_ACCESS_KEY_ID_STAGE }}"
          echo "::set-env name=AWS_SECRET_ACCESS_KEY::${{ secrets.AWS_SECRET_ACCESS_KEY_STAGE }}"
          echo "::set-env name=API_ID::${{ secrets.APPSYNC_API_ID_STAGE }}"
        else:
          echo "REF: ${GITHUB_REF}"
          echo "Not a buildable branch. Exiting"
        fi
        echo "REF: ${GITHUB_REF}"
    - name: Upload schema
      run: |
        python -m appsync_schema_uploader --aws-access-key-id ${AWS_ACCESS_KEY_ID} --aws-secret-access-key ${AWS_SECRET_ACCESS_KEY} --api-id ${API_ID} --schema schema.graphql
    - name: Upload resolvers
      run: |
        SINGLE_RESPONSE="python -m appsync_resolver_uploader --aws-access-key-id ${AWS_ACCESS_KEY_ID} --aws-secret-access-key ${AWS_SECRET_ACCESS_KEY} --api-id ${API_ID} --datasource-name dynamodb --response-mapping-template response_templates/single-result.vtl --request-mapping-template "
        DEFAULT="python -m appsync_resolver_uploader --aws-access-key-id ${AWS_ACCESS_KEY_ID} --aws-secret-access-key ${AWS_SECRET_ACCESS_KEY} --api-id ${API_ID} --datasource-name dynamodb --response-mapping-template response_templates/default.vtl --request-mapping-template "
        LAMBDA_RESOLVER="python -m appsync_resolver_uploader --aws-access-key-id ${AWS_ACCESS_KEY_ID} --aws-secret-access-key ${AWS_SECRET_ACCESS_KEY} --api-id ${API_ID} --datasource-name "

        # Queries
        $LAMBDA_RESOLVER kms_key_datasource --type-name Query --field-name ListKeys
        $DEFAULT request_templates/GetUsersForTenant.vtl --type-name Query --field-name GetUsersForTenant
        $DEFAULT request_templates/GetUser.vtl --type-name Query --field-name GetUser

        # Mutations
        $LAMBDA_RESOLVER kms_key_datasource --type Mutation --field-name PutKmsKey
        $LAMBDA_RESOLVER edge_datasource --type Mutation --field-name PutEdge
        $DEFAULT request_templates/PutHl7InboundNode.vtl --type Mutation --field-name PutHl7InboundNode
        $DEFAULT request_templates/PutHl7OutboundNode.vtl --type Mutation --field-name PutHl7OutboundNode
        $DEFAULT request_templates/PutEdgeNode.vtl --type Mutation --field-name PutEdgeNode
        $DEFAULT request_templates/PutCustomNode.vtl --type Mutation --field-name PutCustomNode
        $DEFAULT request_templates/PutHl7App.vtl --type Mutation --field-name PutHl7App
        $DEFAULT request_templates/PutEdgeApp.vtl --type Mutation --field-name PutEdgeApp
        $DEFAULT request_templates/PutTenant.vtl --type Mutation --field-name PutTenant
        $DEFAULT request_templates/AddUserToTenant.vtl --type Mutation --field-name AddUserToTenant

        # Subtypes
        $DEFAULT request_templates/X-tenant.vtl --type Hl7InboundNode --field-name tenant
        $DEFAULT request_templates/X-tenant.vtl --type Hl7OutboundNode --field-name tenant
        $DEFAULT request_templates/X-tenant.vtl --type EdgeNode --field-name tenant
        $DEFAULT request_templates/X-tenant.vtl --type CustomNode --field-name tenant
        $DEFAULT request_templates/X-tenant.vtl --type Edge --field-name tenant
        $DEFAULT request_templates/X-tenant.vtl --type Hl7App --field-name tenant
        $DEFAULT request_templates/X-tenant.vtl --type EdgeApp --field-name tenant
        $DEFAULT request_templates/X-tenant.vtl --type User --field-name tenant

        # Nodes for apps
        $DEFAULT request_templates/App-nodes.vtl --type Hl7App --field-name nodes
        $DEFAULT request_templates/App-nodes.vtl --type EdgeApp --field-name nodes


        # Target Edge resolvers for nodes
        $DEFAULT request_templates/Node-send_edges.vtl --type EdgeNode --field-name send_edges
        $DEFAULT request_templates/Node-send_edges.vtl --type CustomNode --field-name send_edges
        $SINGLE_RESPONSE request_templates/Hl7Node-receive_edge.vtl --type Hl7InboundNode --field-name edge
        $SINGLE_RESPONSE request_templates/Hl7Node-send_edge.vtl --type Hl7OutboundNode --field-name edge
        $DEFAULT request_templates/Node-receive_edges.vtl --type EdgeNode --field-name receive_edges
        $DEFAULT request_templates/Node-receive_edges.vtl --type CustomNode --field-name receive_edges
        $LAMBDA_RESOLVER kms_key_datasource --type-name Edge --field-name kms_key
